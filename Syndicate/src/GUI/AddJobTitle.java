/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Classes.JDBC;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class AddJobTitle extends javax.swing.JFrame {

    JDBC db = new JDBC();

    private int sr;

    private int adminPanel = 0;
    private int adminStudentDetails = 0;
    private int adminAttendanceDetails = 0;
    private int adminEmployeeDetails = 0;
    private int adminExpenses = 0;
    private int adminTeacherDetails = 0;
    private int adminSalaryInvoice = 0;
    private int adminIncomeDetails = 0;
    private int studentRegistration = 0;
    private int expenses = 0;
    private int expensesTeacherPayments = 0;
    private int expensesSalary = 0;
    private int expensesOtherPayments = 0;
    private int employeeRegistration = 0;
    private int teacherRegistration = 0;
    private int userRegistration = 0;
    private int classDetails = 0;
    private int teacherTimetable = 0;
    private int mainTimetable = 0;
    private int attendance = 0;
    private int leaves = 0;
    private int studentPayments = 0;
    private int jobTitle = 0;
    private int subject = 0;
    private int qualification = 0;
    private int backupNRestore = 0;

    /**
     * Creates new form ClassDetails
     */
    public AddJobTitle() {
        initComponents();
        new Classes.Commons().background(this, lbl_background);
        refresh();
        lbl_username.setText(GUI.Home.un);
        lbl_userType.setText(GUI.Home.ut);
        lbl_date.setText(new Classes.Commons().Date());
        new Classes.Commons().time(lbl_time);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_background = new javax.swing.JPanel();
        pnl_header = new javax.swing.JPanel();
        lbl_userType = new javax.swing.JLabel();
        lbl_username = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        lbl_time = new javax.swing.JLabel();
        lbl_date = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        pnl_addJobTitle = new javax.swing.JPanel();
        lbl_jobTitle = new javax.swing.JLabel();
        txt_titleId = new javax.swing.JTextField();
        txt_jobTitle = new javax.swing.JTextField();
        lbl_titleId = new javax.swing.JLabel();
        btn_add = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        txt_salary = new javax.swing.JTextField();
        lbl_salary = new javax.swing.JLabel();
        pnl_jobTitles = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_jobTitles = new javax.swing.JTable();
        btn_refresh = new javax.swing.JButton();
        pnl_accessPrivilages = new javax.swing.JPanel();
        chk_adminPanel = new javax.swing.JCheckBox();
        chk_adminStudentDetails = new javax.swing.JCheckBox();
        chk_adminAttendanceDetails = new javax.swing.JCheckBox();
        chk_adminEmployeeDetails = new javax.swing.JCheckBox();
        chk_adminExpenses = new javax.swing.JCheckBox();
        chk_adminTeacherDetails = new javax.swing.JCheckBox();
        chk_adminSalaryInvoice = new javax.swing.JCheckBox();
        chk_adminIncomeDetails = new javax.swing.JCheckBox();
        chk_studentRegistration = new javax.swing.JCheckBox();
        chk_expenses = new javax.swing.JCheckBox();
        chk_expensesTeacherPayments = new javax.swing.JCheckBox();
        chk_expensesSalary = new javax.swing.JCheckBox();
        chk_expensesOtherPayments = new javax.swing.JCheckBox();
        chk_employeeRegistration = new javax.swing.JCheckBox();
        chk_teacherRegistration = new javax.swing.JCheckBox();
        chk_userRegistration = new javax.swing.JCheckBox();
        chk_classDetails = new javax.swing.JCheckBox();
        chk_mainTimetable = new javax.swing.JCheckBox();
        chk_teachersTimetable = new javax.swing.JCheckBox();
        chk_attendance = new javax.swing.JCheckBox();
        chk_leaves = new javax.swing.JCheckBox();
        chk_studentPayments = new javax.swing.JCheckBox();
        chk_jobTitle = new javax.swing.JCheckBox();
        chk_subject = new javax.swing.JCheckBox();
        chk_qualification = new javax.swing.JCheckBox();
        chk_backupNRestore = new javax.swing.JCheckBox();
        lbl_background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnl_background.setBackground(new java.awt.Color(255, 255, 255));
        pnl_background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnl_header.setBackground(new java.awt.Color(255, 255, 255));
        pnl_header.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnl_header.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_userType.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        lbl_userType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_userType.setText("User type");
        pnl_header.add(lbl_userType, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 30, 220, -1));

        lbl_username.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        lbl_username.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_username.setText("Username");
        pnl_header.add(lbl_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 10, 220, -1));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/cancel.png"))); // NOI18N
        jButton5.setContentAreaFilled(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        pnl_header.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 4, 16, 16));

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/menu.png"))); // NOI18N
        jButton6.setContentAreaFilled(false);
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pnl_header.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 9, 32, 32));

        lbl_time.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        lbl_time.setText("jLabel3");
        pnl_header.add(lbl_time, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 23, 100, -1));

        lbl_date.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        lbl_date.setText("jLabel3");
        pnl_header.add(lbl_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 100, -1));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setText("Job Title");
        pnl_header.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 340, 30));

        pnl_background.add(pnl_header, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 940, 50));

        pnl_addJobTitle.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add Job Title", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 10), new java.awt.Color(0, 0, 0))); // NOI18N
        pnl_addJobTitle.setOpaque(false);

        lbl_jobTitle.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_jobTitle.setText("Job Title:");

        txt_titleId.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_titleId.setEnabled(false);

        txt_jobTitle.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        lbl_titleId.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_titleId.setText("Job Title ID:");

        btn_add.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_add.setText("Add");
        btn_add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_delete.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_delete.setText("Delete");
        btn_delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_update.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_update.setText("Update");
        btn_update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        txt_salary.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        lbl_salary.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_salary.setText("Salary:");

        javax.swing.GroupLayout pnl_addJobTitleLayout = new javax.swing.GroupLayout(pnl_addJobTitle);
        pnl_addJobTitle.setLayout(pnl_addJobTitleLayout);
        pnl_addJobTitleLayout.setHorizontalGroup(
            pnl_addJobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_addJobTitleLayout.createSequentialGroup()
                .addGroup(pnl_addJobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_addJobTitleLayout.createSequentialGroup()
                        .addGroup(pnl_addJobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbl_jobTitle, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_titleId, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(pnl_addJobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_titleId)
                            .addComponent(txt_jobTitle)))
                    .addGroup(pnl_addJobTitleLayout.createSequentialGroup()
                        .addComponent(lbl_salary)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addGroup(pnl_addJobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txt_salary)
                            .addGroup(pnl_addJobTitleLayout.createSequentialGroup()
                                .addComponent(btn_update)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        pnl_addJobTitleLayout.setVerticalGroup(
            pnl_addJobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_addJobTitleLayout.createSequentialGroup()
                .addGroup(pnl_addJobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_titleId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_titleId))
                .addGap(13, 13, 13)
                .addGroup(pnl_addJobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_jobTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_jobTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(pnl_addJobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_salary, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_salary))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_addJobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_add)
                    .addComponent(btn_delete)
                    .addComponent(btn_update)))
        );

        pnl_background.add(pnl_addJobTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 410, 170));

        pnl_jobTitles.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Job Titles", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 10), new java.awt.Color(0, 0, 0))); // NOI18N
        pnl_jobTitles.setOpaque(false);

        tbl_jobTitles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job Title ID", "Job Title", "Salary"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_jobTitles.getTableHeader().setReorderingAllowed(false);
        tbl_jobTitles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_jobTitlesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_jobTitles);
        if (tbl_jobTitles.getColumnModel().getColumnCount() > 0) {
            tbl_jobTitles.getColumnModel().getColumn(0).setResizable(false);
            tbl_jobTitles.getColumnModel().getColumn(1).setResizable(false);
        }

        btn_refresh.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_refresh.setText("Refresh");
        btn_refresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_jobTitlesLayout = new javax.swing.GroupLayout(pnl_jobTitles);
        pnl_jobTitles.setLayout(pnl_jobTitlesLayout);
        pnl_jobTitlesLayout.setHorizontalGroup(
            pnl_jobTitlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_jobTitlesLayout.createSequentialGroup()
                .addGroup(pnl_jobTitlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_jobTitlesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_refresh)))
                .addContainerGap())
        );
        pnl_jobTitlesLayout.setVerticalGroup(
            pnl_jobTitlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_jobTitlesLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_refresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(181, 181, 181))
        );

        pnl_background.add(pnl_jobTitles, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 410, 180));

        pnl_accessPrivilages.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Access Privilages", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 10), new java.awt.Color(0, 0, 0))); // NOI18N
        pnl_accessPrivilages.setOpaque(false);

        chk_adminPanel.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_adminPanel.setText("Admin Panel");
        chk_adminPanel.setOpaque(false);
        chk_adminPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                chk_adminPanelMouseReleased(evt);
            }
        });

        chk_adminStudentDetails.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_adminStudentDetails.setText("Student Details");
        chk_adminStudentDetails.setOpaque(false);

        chk_adminAttendanceDetails.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_adminAttendanceDetails.setText("Attendance Details");
        chk_adminAttendanceDetails.setOpaque(false);

        chk_adminEmployeeDetails.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_adminEmployeeDetails.setText("Employee Details");
        chk_adminEmployeeDetails.setOpaque(false);

        chk_adminExpenses.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_adminExpenses.setText("Expenses");
        chk_adminExpenses.setOpaque(false);

        chk_adminTeacherDetails.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_adminTeacherDetails.setText("Teacher Details");
        chk_adminTeacherDetails.setOpaque(false);

        chk_adminSalaryInvoice.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_adminSalaryInvoice.setText("Salary Invoice");
        chk_adminSalaryInvoice.setOpaque(false);

        chk_adminIncomeDetails.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_adminIncomeDetails.setText("Income Details");
        chk_adminIncomeDetails.setOpaque(false);

        chk_studentRegistration.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_studentRegistration.setText("Student Registration");
        chk_studentRegistration.setOpaque(false);

        chk_expenses.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_expenses.setText("Expenses");
        chk_expenses.setOpaque(false);
        chk_expenses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                chk_expensesMouseReleased(evt);
            }
        });

        chk_expensesTeacherPayments.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_expensesTeacherPayments.setText("Teacher Payments");
        chk_expensesTeacherPayments.setOpaque(false);

        chk_expensesSalary.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_expensesSalary.setText("Salary");
        chk_expensesSalary.setOpaque(false);

        chk_expensesOtherPayments.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_expensesOtherPayments.setText("Other Payments");
        chk_expensesOtherPayments.setOpaque(false);

        chk_employeeRegistration.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_employeeRegistration.setText("Employee Registration");
        chk_employeeRegistration.setOpaque(false);

        chk_teacherRegistration.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_teacherRegistration.setText("Teacher Registration");
        chk_teacherRegistration.setOpaque(false);

        chk_userRegistration.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_userRegistration.setText("User Registration");
        chk_userRegistration.setOpaque(false);

        chk_classDetails.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_classDetails.setText("Class Details");
        chk_classDetails.setOpaque(false);

        chk_mainTimetable.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_mainTimetable.setText("Main Timetable");
        chk_mainTimetable.setOpaque(false);

        chk_teachersTimetable.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_teachersTimetable.setText("Teacher's Timetable");
        chk_teachersTimetable.setOpaque(false);

        chk_attendance.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_attendance.setText("Attendance");
        chk_attendance.setOpaque(false);

        chk_leaves.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_leaves.setText("Leaves");
        chk_leaves.setOpaque(false);

        chk_studentPayments.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_studentPayments.setText("Student Payments");
        chk_studentPayments.setOpaque(false);

        chk_jobTitle.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_jobTitle.setText("Job Title");
        chk_jobTitle.setOpaque(false);

        chk_subject.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_subject.setText("Subject");
        chk_subject.setOpaque(false);

        chk_qualification.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_qualification.setText("Qualification");
        chk_qualification.setOpaque(false);

        chk_backupNRestore.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        chk_backupNRestore.setText("Backup & Restore");
        chk_backupNRestore.setOpaque(false);

        javax.swing.GroupLayout pnl_accessPrivilagesLayout = new javax.swing.GroupLayout(pnl_accessPrivilages);
        pnl_accessPrivilages.setLayout(pnl_accessPrivilagesLayout);
        pnl_accessPrivilagesLayout.setHorizontalGroup(
            pnl_accessPrivilagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_accessPrivilagesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_accessPrivilagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chk_adminPanel)
                    .addGroup(pnl_accessPrivilagesLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(pnl_accessPrivilagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chk_adminAttendanceDetails)
                            .addComponent(chk_adminStudentDetails)
                            .addComponent(chk_adminEmployeeDetails)
                            .addComponent(chk_adminExpenses)
                            .addComponent(chk_adminTeacherDetails)
                            .addComponent(chk_adminSalaryInvoice)
                            .addComponent(chk_adminIncomeDetails)))
                    .addComponent(chk_studentRegistration))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_accessPrivilagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chk_teachersTimetable)
                    .addGroup(pnl_accessPrivilagesLayout.createSequentialGroup()
                        .addGroup(pnl_accessPrivilagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chk_expenses)
                            .addGroup(pnl_accessPrivilagesLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(pnl_accessPrivilagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chk_expensesSalary)
                                    .addComponent(chk_expensesTeacherPayments)
                                    .addComponent(chk_expensesOtherPayments)))
                            .addComponent(chk_employeeRegistration)
                            .addComponent(chk_teacherRegistration)
                            .addComponent(chk_userRegistration)
                            .addComponent(chk_classDetails))
                        .addGap(18, 18, 18)
                        .addGroup(pnl_accessPrivilagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chk_mainTimetable)
                            .addComponent(chk_attendance)
                            .addComponent(chk_leaves)
                            .addComponent(chk_studentPayments)
                            .addComponent(chk_jobTitle)
                            .addComponent(chk_subject)
                            .addComponent(chk_qualification)
                            .addComponent(chk_backupNRestore))))
                .addGap(59, 59, 59))
        );
        pnl_accessPrivilagesLayout.setVerticalGroup(
            pnl_accessPrivilagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_accessPrivilagesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_accessPrivilagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_accessPrivilagesLayout.createSequentialGroup()
                        .addGroup(pnl_accessPrivilagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_accessPrivilagesLayout.createSequentialGroup()
                                .addComponent(chk_expenses)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_expensesTeacherPayments)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_expensesSalary)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_expensesOtherPayments)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_employeeRegistration)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_teacherRegistration)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_userRegistration)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_classDetails))
                            .addGroup(pnl_accessPrivilagesLayout.createSequentialGroup()
                                .addComponent(chk_mainTimetable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_attendance)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_leaves)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_studentPayments)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_jobTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_subject)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_qualification)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_backupNRestore)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chk_teachersTimetable))
                    .addGroup(pnl_accessPrivilagesLayout.createSequentialGroup()
                        .addComponent(chk_adminPanel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chk_adminStudentDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chk_adminAttendanceDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chk_adminEmployeeDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chk_adminExpenses)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chk_adminTeacherDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chk_adminSalaryInvoice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chk_adminIncomeDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chk_studentRegistration)))
                .addContainerGap(97, Short.MAX_VALUE))
        );

        pnl_background.add(pnl_accessPrivilages, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 60, 520, 350));

        lbl_background.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnl_background.add(lbl_background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 940, 430));

        getContentPane().add(pnl_background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 940, 430));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        add();
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        delete();
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        update();
    }//GEN-LAST:event_btn_updateActionPerformed

    private void tbl_jobTitlesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_jobTitlesMouseClicked
        tableClick();
    }//GEN-LAST:event_tbl_jobTitlesMouseClicked

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        refresh();
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void chk_adminPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chk_adminPanelMouseReleased
        if (chk_adminPanel.isSelected()) {
            chk_adminAttendanceDetails.setEnabled(true);
            chk_adminEmployeeDetails.setEnabled(true);
            chk_adminExpenses.setEnabled(true);
            chk_adminIncomeDetails.setEnabled(true);
            chk_adminSalaryInvoice.setEnabled(true);
            chk_adminStudentDetails.setEnabled(true);
            chk_adminTeacherDetails.setEnabled(true);
        } else {
            chk_adminAttendanceDetails.setEnabled(false);
            chk_adminEmployeeDetails.setEnabled(false);
            chk_adminExpenses.setEnabled(false);
            chk_adminIncomeDetails.setEnabled(false);
            chk_adminSalaryInvoice.setEnabled(false);
            chk_adminStudentDetails.setEnabled(false);
            chk_adminTeacherDetails.setEnabled(false);

            chk_adminAttendanceDetails.setSelected(false);
            chk_adminEmployeeDetails.setSelected(false);
            chk_adminExpenses.setSelected(false);
            chk_adminIncomeDetails.setSelected(false);
            chk_adminSalaryInvoice.setSelected(false);
            chk_adminStudentDetails.setSelected(false);
            chk_adminTeacherDetails.setSelected(false);
        }
    }//GEN-LAST:event_chk_adminPanelMouseReleased

    private void chk_expensesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chk_expensesMouseReleased
        if (chk_expenses.isSelected()) {
            chk_expensesOtherPayments.setEnabled(true);
            chk_expensesSalary.setEnabled(true);
            chk_expensesTeacherPayments.setEnabled(true);
        } else {
            chk_expensesOtherPayments.setEnabled(false);
            chk_expensesSalary.setEnabled(false);
            chk_expensesTeacherPayments.setEnabled(false);

            chk_expensesOtherPayments.setSelected(false);
            chk_expensesSalary.setSelected(false);
            chk_expensesTeacherPayments.setSelected(false);
        }
    }//GEN-LAST:event_chk_expensesMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddJobTitle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddJobTitle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddJobTitle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddJobTitle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddJobTitle().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_update;
    private javax.swing.JCheckBox chk_adminAttendanceDetails;
    private javax.swing.JCheckBox chk_adminEmployeeDetails;
    private javax.swing.JCheckBox chk_adminExpenses;
    private javax.swing.JCheckBox chk_adminIncomeDetails;
    private javax.swing.JCheckBox chk_adminPanel;
    private javax.swing.JCheckBox chk_adminSalaryInvoice;
    private javax.swing.JCheckBox chk_adminStudentDetails;
    private javax.swing.JCheckBox chk_adminTeacherDetails;
    private javax.swing.JCheckBox chk_attendance;
    private javax.swing.JCheckBox chk_backupNRestore;
    private javax.swing.JCheckBox chk_classDetails;
    private javax.swing.JCheckBox chk_employeeRegistration;
    private javax.swing.JCheckBox chk_expenses;
    private javax.swing.JCheckBox chk_expensesOtherPayments;
    private javax.swing.JCheckBox chk_expensesSalary;
    private javax.swing.JCheckBox chk_expensesTeacherPayments;
    private javax.swing.JCheckBox chk_jobTitle;
    private javax.swing.JCheckBox chk_leaves;
    private javax.swing.JCheckBox chk_mainTimetable;
    private javax.swing.JCheckBox chk_qualification;
    private javax.swing.JCheckBox chk_studentPayments;
    private javax.swing.JCheckBox chk_studentRegistration;
    private javax.swing.JCheckBox chk_subject;
    private javax.swing.JCheckBox chk_teacherRegistration;
    private javax.swing.JCheckBox chk_teachersTimetable;
    private javax.swing.JCheckBox chk_userRegistration;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_background;
    private javax.swing.JLabel lbl_date;
    private javax.swing.JLabel lbl_jobTitle;
    private javax.swing.JLabel lbl_salary;
    private javax.swing.JLabel lbl_time;
    private javax.swing.JLabel lbl_titleId;
    private javax.swing.JLabel lbl_userType;
    private javax.swing.JLabel lbl_username;
    private javax.swing.JPanel pnl_accessPrivilages;
    private javax.swing.JPanel pnl_addJobTitle;
    private javax.swing.JPanel pnl_background;
    private javax.swing.JPanel pnl_header;
    private javax.swing.JPanel pnl_jobTitles;
    private javax.swing.JTable tbl_jobTitles;
    private javax.swing.JTextField txt_jobTitle;
    private javax.swing.JTextField txt_salary;
    private javax.swing.JTextField txt_titleId;
    // End of variables declaration//GEN-END:variables
    void tableClick() {
        DefaultTableModel d = (DefaultTableModel) tbl_jobTitles.getModel();

        sr = tbl_jobTitles.getSelectedRow();

        String jobId = (String) d.getValueAt(sr, 0);
        String jobName = (String) d.getValueAt(sr, 1);
        String salary = (String) d.getValueAt(sr, 2);
        try {
            ResultSet rs = db.getData("SELECT\n"
                    + "  *\n"
                    + "FROM\n"
                    + "  job_title\n"
                    + "INNER JOIN\n"
                    + "  acces_privilages\n"
                    + "ON\n"
                    + "  (job_title.acces_privilages_id=acces_privilages.acces_privilages_id)\n"
                    + "WHERE\n"
                    + "  job_title_id='" + jobId + "'");

            while (rs.next()) {
                adminPanel = Integer.parseInt(rs.getString("adminPanel"));
                adminStudentDetails = Integer.parseInt(rs.getString("adminStudentDetails"));
                adminAttendanceDetails = Integer.parseInt(rs.getString("adminAttendanceDetails"));
                adminEmployeeDetails = Integer.parseInt(rs.getString("adminEmployeeDetails"));
                adminExpenses = Integer.parseInt(rs.getString("adminExpenses"));
                adminTeacherDetails = Integer.parseInt(rs.getString("adminTeacherDetails"));
                adminSalaryInvoice = Integer.parseInt(rs.getString("adminSalaryInvoice"));
                adminIncomeDetails = Integer.parseInt(rs.getString("adminIncomeDetails"));
                studentRegistration = Integer.parseInt(rs.getString("studentRegistration"));
                expenses = Integer.parseInt(rs.getString("expenses"));
                expensesTeacherPayments = Integer.parseInt(rs.getString("expensesTeacherPayments"));
                expensesSalary = Integer.parseInt(rs.getString("expensesSalary"));
                expensesOtherPayments = Integer.parseInt(rs.getString("expensesOtherPayments"));
                employeeRegistration = Integer.parseInt(rs.getString("employeeRegistration"));
                teacherRegistration = Integer.parseInt(rs.getString("teacherRegistration"));
                userRegistration = Integer.parseInt(rs.getString("userRegistration"));
                classDetails = Integer.parseInt(rs.getString("classDetails"));
                teacherTimetable = Integer.parseInt(rs.getString("teacherTimetable"));
                mainTimetable = Integer.parseInt(rs.getString("mainTimetable"));
                attendance = Integer.parseInt(rs.getString("attendance"));
                leaves = Integer.parseInt(rs.getString("leaves"));
                studentPayments = Integer.parseInt(rs.getString("studentPayments"));
                jobTitle = Integer.parseInt(rs.getString("jobTitle"));
                subject = Integer.parseInt(rs.getString("subject"));
                qualification = Integer.parseInt(rs.getString("qualification"));
                backupNRestore = Integer.parseInt(rs.getString("backup"));

                if (adminPanel == 1) {
                    chk_adminPanel.setSelected(true);
                    chk_adminAttendanceDetails.setEnabled(true);
                    chk_adminEmployeeDetails.setEnabled(true);
                    chk_adminExpenses.setEnabled(true);
                    chk_adminIncomeDetails.setEnabled(true);
                    chk_adminSalaryInvoice.setEnabled(true);
                    chk_adminStudentDetails.setEnabled(true);
                    chk_adminTeacherDetails.setEnabled(true);
                } else {
                    chk_adminPanel.setSelected(false);
                    chk_adminAttendanceDetails.setEnabled(false);
                    chk_adminEmployeeDetails.setEnabled(false);
                    chk_adminExpenses.setEnabled(false);
                    chk_adminIncomeDetails.setEnabled(false);
                    chk_adminSalaryInvoice.setEnabled(false);
                    chk_adminStudentDetails.setEnabled(false);
                    chk_adminTeacherDetails.setEnabled(false);
                }

                if (adminStudentDetails == 1) {
                    chk_adminStudentDetails.setSelected(true);
                } else {
                    chk_adminStudentDetails.setSelected(false);
                }

                if (adminAttendanceDetails == 1) {
                    chk_adminAttendanceDetails.setSelected(true);
                } else {
                    chk_adminAttendanceDetails.setSelected(false);
                }

                if (adminEmployeeDetails == 1) {
                    chk_adminEmployeeDetails.setSelected(true);
                } else {
                    chk_adminEmployeeDetails.setSelected(false);
                }

                if (adminExpenses == 1) {
                    chk_adminExpenses.setSelected(true);
                } else {
                    chk_adminExpenses.setSelected(false);
                }

                if (adminTeacherDetails == 1) {
                    chk_adminTeacherDetails.setSelected(true);
                } else {
                    chk_adminTeacherDetails.setSelected(false);
                }

                if (adminSalaryInvoice == 1) {
                    chk_adminSalaryInvoice.setSelected(true);
                } else {
                    chk_adminSalaryInvoice.setSelected(false);
                }

                if (adminIncomeDetails == 1) {
                    chk_adminIncomeDetails.setSelected(true);
                } else {
                    chk_adminIncomeDetails.setSelected(false);
                }

                if (studentRegistration == 1) {
                    chk_studentRegistration.setSelected(true);
                } else {
                    chk_studentRegistration.setSelected(false);
                }

                if (expenses == 1) {
                    chk_expenses.setSelected(true);
                    chk_expensesOtherPayments.setEnabled(true);
                    chk_expensesSalary.setEnabled(true);
                    chk_expensesTeacherPayments.setEnabled(true);
                } else {
                    chk_expenses.setSelected(false);
                    chk_expensesOtherPayments.setEnabled(false);
                    chk_expensesSalary.setEnabled(false);
                    chk_expensesTeacherPayments.setEnabled(false);
                }

                if (expensesTeacherPayments == 1) {
                    chk_expensesTeacherPayments.setSelected(true);
                } else {
                    chk_expensesTeacherPayments.setSelected(false);
                }

                if (expensesSalary == 1) {
                    chk_expensesSalary.setSelected(true);
                } else {
                    chk_expensesSalary.setSelected(false);
                }

                if (expensesOtherPayments == 1) {
                    chk_expensesOtherPayments.setSelected(true);
                } else {
                    chk_expensesOtherPayments.setSelected(false);
                }

                if (employeeRegistration == 1) {
                    chk_employeeRegistration.setSelected(true);
                } else {
                    chk_employeeRegistration.setSelected(false);
                }

                if (teacherRegistration == 1) {
                    chk_teacherRegistration.setSelected(true);
                } else {
                    chk_teacherRegistration.setSelected(false);
                }

                if (userRegistration == 1) {
                    chk_userRegistration.setSelected(true);
                } else {
                    chk_userRegistration.setSelected(false);
                }

                if (classDetails == 1) {
                    chk_classDetails.setSelected(true);
                } else {
                    chk_classDetails.setSelected(false);
                }

                if (teacherTimetable == 1) {
                    chk_teachersTimetable.setSelected(true);
                } else {
                    chk_teachersTimetable.setSelected(false);
                }

                if (mainTimetable == 1) {
                    chk_mainTimetable.setSelected(true);
                } else {
                    chk_mainTimetable.setSelected(false);
                }

                if (attendance == 1) {
                    chk_attendance.setSelected(true);
                } else {
                    chk_attendance.setSelected(false);
                }

                if (leaves == 1) {
                    chk_leaves.setSelected(true);
                } else {
                    chk_leaves.setSelected(false);
                }

                if (studentPayments == 1) {
                    chk_studentPayments.setSelected(true);
                } else {
                    chk_studentPayments.setSelected(false);
                }

                if (jobTitle == 1) {
                    chk_jobTitle.setSelected(true);
                } else {
                    chk_jobTitle.setSelected(false);
                }

                if (subject == 1) {
                    chk_subject.setSelected(true);
                } else {
                    chk_subject.setSelected(false);
                }

                if (qualification == 1) {
                    chk_qualification.setSelected(true);
                } else {
                    chk_qualification.setSelected(false);
                }

                if (backupNRestore == 1) {
                    chk_backupNRestore.setSelected(true);
                } else {
                    chk_backupNRestore.setSelected(false);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        txt_titleId.setText(jobId);
        txt_jobTitle.setText(jobName);
        txt_salary.setText(salary);
    }

    void tableLoad() {
        DefaultTableModel d1 = (DefaultTableModel) tbl_jobTitles.getModel();
        int rowcount1 = d1.getRowCount();
        for (int i = 0; i < rowcount1; i++) {
            d1.removeRow(0);
        }
        try {
            ResultSet r = new JDBC().getData(""
                    + "SELECT\n"
                    + "  job_title.job_title_id,\n"
                    + "  job_title.job_name,\n"
                    + "  basic_salary.amount\n"
                    + "FROM\n"
                    + "  job_title\n"
                    + "INNER JOIN\n"
                    + "  basic_salary\n"
                    + "ON\n"
                    + "  (job_title.job_title_id=basic_salary.job_title_id)");
            while (r.next()) {
                Vector vec = new Vector();
                vec.add(r.getString(1));
                vec.add(r.getString(2));
                vec.add(r.getString(3));
                d1.addRow(vec);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void refresh() {
        loadId();
        tableLoad();
        txt_jobTitle.setText(null);
        txt_salary.setText(null);
        txt_jobTitle.grabFocus();
        checked(
                chk_adminPanel,
                chk_adminStudentDetails,
                chk_adminAttendanceDetails,
                chk_adminEmployeeDetails,
                chk_adminExpenses,
                chk_adminTeacherDetails,
                chk_adminSalaryInvoice,
                chk_adminIncomeDetails,
                chk_studentRegistration,
                chk_expenses,
                chk_expensesTeacherPayments,
                chk_expensesSalary,
                chk_expensesOtherPayments,
                chk_employeeRegistration,
                chk_teacherRegistration,
                chk_userRegistration,
                chk_classDetails,
                chk_teachersTimetable,
                chk_mainTimetable,
                chk_attendance,
                chk_leaves,
                chk_studentPayments,
                chk_jobTitle,
                chk_subject,
                chk_qualification,
                chk_backupNRestore
        );
        disable(
                chk_adminAttendanceDetails,
                chk_adminEmployeeDetails,
                chk_adminExpenses,
                chk_adminIncomeDetails,
                chk_adminSalaryInvoice,
                chk_adminStudentDetails,
                chk_adminTeacherDetails,
                chk_expensesOtherPayments,
                chk_expensesSalary,
                chk_expensesTeacherPayments
        );
    }

    void add() {
        if (txt_jobTitle.getText().isEmpty() || txt_salary.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Field can't be Empty ");
        } else {
            String jobTitleName = txt_jobTitle.getText().toLowerCase();

            boolean f = true;

            DefaultTableModel d = (DefaultTableModel) tbl_jobTitles.getModel();

            int rowCount = d.getRowCount();

            if (rowCount > 0) {
                for (int i = 0; i < rowCount; i++) {
                    String jobName = (String) d.getValueAt(i, 1);

                    if (jobTitleName.equals(jobName.toLowerCase())) {
                        f = false;
                        break;
                    } else {
                        f = true;
                    }
                }
            }

            if (f) {
                if (chk_adminPanel.isSelected()) {
                    adminPanel = 1;
                } else {
                    adminPanel = 0;
                }

                if (chk_adminStudentDetails.isSelected()) {
                    adminStudentDetails = 1;
                } else {
                    adminStudentDetails = 0;
                }

                if (chk_adminAttendanceDetails.isSelected()) {
                    adminAttendanceDetails = 1;
                } else {
                    adminAttendanceDetails = 0;
                }

                if (chk_adminEmployeeDetails.isSelected()) {
                    adminEmployeeDetails = 1;
                } else {
                    adminEmployeeDetails = 0;
                }

                if (chk_adminExpenses.isSelected()) {
                    adminExpenses = 1;
                } else {
                    adminExpenses = 0;
                }

                if (chk_adminTeacherDetails.isSelected()) {
                    adminTeacherDetails = 1;
                } else {
                    adminTeacherDetails = 0;
                }

                if (chk_adminSalaryInvoice.isSelected()) {
                    adminSalaryInvoice = 1;
                } else {
                    adminSalaryInvoice = 0;
                }

                if (chk_adminIncomeDetails.isSelected()) {
                    adminIncomeDetails = 1;
                } else {
                    adminIncomeDetails = 0;
                }

                if (chk_studentRegistration.isSelected()) {
                    studentRegistration = 1;
                } else {
                    studentRegistration = 0;
                }

                if (chk_expenses.isSelected()) {
                    expenses = 1;
                } else {
                    expenses = 0;
                }

                if (chk_expensesTeacherPayments.isSelected()) {
                    expensesTeacherPayments = 1;
                } else {
                    expensesTeacherPayments = 0;
                }

                if (chk_expensesSalary.isSelected()) {
                    expensesSalary = 1;
                } else {
                    expensesSalary = 0;
                }

                if (chk_expensesOtherPayments.isSelected()) {
                    expensesOtherPayments = 1;
                } else {
                    expensesOtherPayments = 0;
                }

                if (chk_employeeRegistration.isSelected()) {
                    employeeRegistration = 1;
                } else {
                    employeeRegistration = 0;
                }

                if (chk_teacherRegistration.isSelected()) {
                    teacherRegistration = 1;
                } else {
                    teacherRegistration = 0;
                }

                if (chk_userRegistration.isSelected()) {
                    userRegistration = 1;
                } else {
                    userRegistration = 0;
                }

                if (chk_classDetails.isSelected()) {
                    classDetails = 1;
                } else {
                    classDetails = 0;
                }

                if (chk_teachersTimetable.isSelected()) {
                    teacherTimetable = 1;
                } else {
                    teacherTimetable = 0;
                }

                if (chk_mainTimetable.isSelected()) {
                    mainTimetable = 1;
                } else {
                    mainTimetable = 0;
                }

                if (chk_attendance.isSelected()) {
                    attendance = 1;
                } else {
                    attendance = 0;
                }

                if (chk_leaves.isSelected()) {
                    leaves = 1;
                } else {
                    leaves = 0;
                }

                if (chk_studentPayments.isSelected()) {
                    studentPayments = 1;
                } else {
                    studentPayments = 0;
                }

                if (chk_jobTitle.isSelected()) {
                    jobTitle = 1;
                } else {
                    jobTitle = 0;
                }

                if (chk_subject.isSelected()) {
                    subject = 1;
                } else {
                    subject = 0;
                }

                if (chk_qualification.isSelected()) {
                    qualification = 1;
                } else {
                    qualification = 0;
                }

                if (chk_backupNRestore.isSelected()) {
                    backupNRestore = 1;
                } else {
                    backupNRestore = 0;
                }

                if (txt_jobTitle.getText().isEmpty() || txt_salary.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Job title or Salary cannot be empty.");
                    refresh();
                } else {
                    try {
                        db.putData("INSERT INTO acces_privilages"
                                + "(adminPanel,adminStudentDetails,adminAttendanceDetails,"
                                + "adminEmployeeDetails,adminExpenses,adminTeacherDetails,adminSalaryInvoice,"
                                + "adminIncomeDetails,studentRegistration,expenses,"
                                + "expensesTeacherPayments,expensesSalary,expensesOtherPayments,"
                                + "employeeRegistration,teacherRegistration,userRegistration,"
                                + "classDetails,teacherTimetable,mainTimetable,"
                                + "attendance,leaves,studentPayments,"
                                + "jobTitle,subject,qualification,backup)VALUES("
                                + "'" + adminPanel + "','" + adminStudentDetails + "','" + adminAttendanceDetails + "',"
                                + "'" + adminEmployeeDetails + "','" + adminExpenses + "','" + adminTeacherDetails + "','" + adminSalaryInvoice + "',"
                                + "'" + adminIncomeDetails + "','" + studentRegistration + "','" + expenses + "',"
                                + "'" + expensesTeacherPayments + "','" + expensesSalary + "','" + expensesOtherPayments + "',"
                                + "'" + employeeRegistration + "','" + teacherRegistration + "','" + userRegistration + "',"
                                + "'" + classDetails + "','" + teacherTimetable + "','" + mainTimetable + "',"
                                + "'" + attendance + "','" + leaves + "','" + studentPayments + "',"
                                + "'" + jobTitle + "','" + subject + "','" + qualification + "','" + backupNRestore + "')");

                        ResultSet rs1 = db.getData("SELECT MAX(acces_privilages_id) AS aid FROM acces_privilages");

                        while (rs1.next()) {
                            String accessID = rs1.getString("aid");

                            db.putData("INSERT INTO job_title(job_title_id,job_name,acces_privilages_id)VALUES("
                                    + "'" + txt_titleId.getText() + "',"
                                    + "'" + txt_jobTitle.getText() + "',"
                                    + "'" + accessID + "')");

                            ResultSet rs2 = db.getData("SELECT MAX(job_title_id) AS jid FROM job_title");

                            while (rs2.next()) {
                                String jobId = rs2.getString("jid");

                                db.putData("INSERT INTO basic_salary(amount,job_title_id)VALUES("
                                        + "'" + txt_salary.getText() + "',"
                                        + "'" + jobId + "')");
                            }
                        }
                        JOptionPane.showMessageDialog(this, "Successfully Saved !");
                        refresh();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "This job title already exists.");
                refresh();
            }
        }

    }

    void loadId() {
        try {
            ResultSet rs = new Classes.JDBC().getData("SELECT MAX(job_title_id) FROM job_title");

            while (rs.next()) {
                int getId = rs.getInt(1);
                int setId = getId + 1;

                txt_titleId.setText(setId + "");

            }
        } catch (Exception ex) {
            Logger.getLogger(AddJobTitle.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    void delete() {
        try {
            ResultSet rs = db.getData("SELECT\n"
                    + "  job_title.job_title_id,\n"
                    + "  employee_reg.emp_id\n"
                    + "FROM\n"
                    + "  job_title\n"
                    + "INNER JOIN\n"
                    + "  employee_reg\n"
                    + "ON\n"
                    + "  (job_title.job_title_id=employee_reg.job_title_id)\n"
                    + "WHERE\n"
                    + "  job_title.job_title_id='" + txt_titleId.getText() + "'");

            if (rs.next()) {
                JOptionPane.showMessageDialog(this, "There is an employee with this job title.\nYou cannot delete this job title.");
            } else {
                try {
                    Statement st = db.connector().createStatement();
                    st.addBatch("SET FOREIGN_KEY_CHECKS=0");
                    st.addBatch("DELETE\n"
                            + "  basic_salary.*,\n"
                            + "  job_title.*,\n"
                            + "  acces_privilages.*\n"
                            + "FROM\n"
                            + "  job_title\n"
                            + "INNER JOIN\n"
                            + "  acces_privilages\n"
                            + "INNER JOIN\n"
                            + "  basic_salary\n"
                            + "WHERE\n"
                            + "  job_title.job_title_id=basic_salary.job_title_id\n"
                            + "AND\n"
                            + "  job_title.acces_privilages_id=acces_privilages.acces_privilages_id\n"
                            + "AND\n"
                            + "  job_title.job_title_id='" + txt_titleId.getText() + "'");
                    st.addBatch("SET FOREIGN_KEY_CHECKS=1");
                    st.executeBatch();
                    JOptionPane.showMessageDialog(this, "Deleted.....!");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        refresh();
    }

    void update() {
        if (chk_adminPanel.isSelected()) {
            adminPanel = 1;
        } else {
            adminPanel = 0;
        }

        if (chk_adminStudentDetails.isSelected()) {
            adminStudentDetails = 1;
        } else {
            adminStudentDetails = 0;
        }

        if (chk_adminAttendanceDetails.isSelected()) {
            adminAttendanceDetails = 1;
        } else {
            adminAttendanceDetails = 0;
        }

        if (chk_adminEmployeeDetails.isSelected()) {
            adminEmployeeDetails = 1;
        } else {
            adminEmployeeDetails = 0;
        }

        if (chk_adminExpenses.isSelected()) {
            adminExpenses = 1;
        } else {
            adminExpenses = 0;
        }

        if (chk_adminTeacherDetails.isSelected()) {
            adminTeacherDetails = 1;
        } else {
            adminTeacherDetails = 0;
        }

        if (chk_adminSalaryInvoice.isSelected()) {
            adminSalaryInvoice = 1;
        } else {
            adminSalaryInvoice = 0;
        }

        if (chk_adminIncomeDetails.isSelected()) {
            adminIncomeDetails = 1;
        } else {
            adminIncomeDetails = 0;
        }

        if (chk_studentRegistration.isSelected()) {
            studentRegistration = 1;
        } else {
            studentRegistration = 0;
        }

        if (chk_expenses.isSelected()) {
            expenses = 1;
        } else {
            expenses = 0;
        }

        if (chk_expensesTeacherPayments.isSelected()) {
            expensesTeacherPayments = 1;
        } else {
            expensesTeacherPayments = 0;
        }

        if (chk_expensesSalary.isSelected()) {
            expensesSalary = 1;
        } else {
            expensesSalary = 0;
        }

        if (chk_expensesOtherPayments.isSelected()) {
            expensesOtherPayments = 1;
        } else {
            expensesOtherPayments = 0;
        }

        if (chk_employeeRegistration.isSelected()) {
            employeeRegistration = 1;
        } else {
            employeeRegistration = 0;
        }

        if (chk_teacherRegistration.isSelected()) {
            teacherRegistration = 1;
        } else {
            teacherRegistration = 0;
        }

        if (chk_userRegistration.isSelected()) {
            userRegistration = 1;
        } else {
            userRegistration = 0;
        }

        if (chk_classDetails.isSelected()) {
            classDetails = 1;
        } else {
            classDetails = 0;
        }

        if (chk_teachersTimetable.isSelected()) {
            teacherTimetable = 1;
        } else {
            teacherTimetable = 0;
        }

        if (chk_mainTimetable.isSelected()) {
            mainTimetable = 1;
        } else {
            mainTimetable = 0;
        }

        if (chk_attendance.isSelected()) {
            attendance = 1;
        } else {
            attendance = 0;
        }

        if (chk_leaves.isSelected()) {
            leaves = 1;
        } else {
            leaves = 0;
        }

        if (chk_studentPayments.isSelected()) {
            studentPayments = 1;
        } else {
            studentPayments = 0;
        }

        if (chk_jobTitle.isSelected()) {
            jobTitle = 1;
        } else {
            jobTitle = 0;
        }

        if (chk_subject.isSelected()) {
            subject = 1;
        } else {
            subject = 0;
        }

        if (chk_qualification.isSelected()) {
            qualification = 1;
        } else {
            qualification = 0;
        }

        if (chk_backupNRestore.isSelected()) {
            backupNRestore = 1;
        } else {
            backupNRestore = 0;
        }

        try {
            db.putData("UPDATE\n"
                    + "  job_title,\n"
                    + "  basic_salary,\n"
                    + "  acces_privilages\n"
                    + "SET\n"
                    + "  job_title.job_name='" + txt_jobTitle.getText() + "',\n"
                    + "  basic_salary.amount='" + txt_salary.getText() + "',\n"
                    + "  acces_privilages.adminPanel='" + adminPanel + "',\n"
                    + "  acces_privilages.adminStudentDetails='" + adminStudentDetails + "',\n"
                    + "  acces_privilages.adminAttendanceDetails='" + adminAttendanceDetails + "',\n"
                    + "  acces_privilages.adminEmployeeDetails='" + adminEmployeeDetails + "',\n"
                    + "  acces_privilages.adminExpenses='" + adminExpenses + "',\n"
                    + "  acces_privilages.adminTeacherDetails='" + adminTeacherDetails + "',\n"
                    + "  acces_privilages.adminSalaryInvoice='" + adminSalaryInvoice + "',\n"
                    + "  acces_privilages.adminIncomeDetails='" + adminIncomeDetails + "',\n"
                    + "  acces_privilages.studentRegistration='" + studentRegistration + "',\n"
                    + "  acces_privilages.expenses='" + expenses + "',\n"
                    + "  acces_privilages.expensesTeacherPayments='" + expensesTeacherPayments + "',\n"
                    + "  acces_privilages.expensesSalary='" + expensesSalary + "',\n"
                    + "  acces_privilages.expensesOtherPayments='" + expensesOtherPayments + "',\n"
                    + "  acces_privilages.employeeRegistration='" + employeeRegistration + "',\n"
                    + "  acces_privilages.teacherRegistration='" + teacherRegistration + "',\n"
                    + "  acces_privilages.userRegistration='" + userRegistration + "',\n"
                    + "  acces_privilages.classDetails='" + classDetails + "',\n"
                    + "  acces_privilages.teacherTimetable='" + teacherTimetable + "',\n"
                    + "  acces_privilages.mainTimetable='" + mainTimetable + "',\n"
                    + "  acces_privilages.attendance='" + attendance + "',\n"
                    + "  acces_privilages.leaves='" + leaves + "',\n"
                    + "  acces_privilages.studentPayments='" + studentPayments + "',\n"
                    + "  acces_privilages.jobTitle='" + jobTitle + "',\n"
                    + "  acces_privilages.subject='" + subject + "',\n"
                    + "  acces_privilages.qualification='" + qualification + "',\n"
                    + "  acces_privilages.backup='" + backupNRestore + "'\n"
                    + "WHERE\n"
                    + "  job_title.job_title_id=basic_salary.job_title_id\n"
                    + "AND\n"
                    + "  job_title.acces_privilages_id=acces_privilages.acces_privilages_id\n"
                    + "AND\n"
                    + "  job_title.job_title_id='" + txt_titleId.getText() + "'");
            JOptionPane.showMessageDialog(this, "Updated.....!");
            refresh();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        refresh();
    }

    private static void disable(JCheckBox... chk) {
        for (JCheckBox c : chk) {
            c.setEnabled(false);
        }
    }

    private static void checked(JCheckBox... chk) {
        for (JCheckBox c : chk) {
            c.setSelected(false);
        }
    }
}
