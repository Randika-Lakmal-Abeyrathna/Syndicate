/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Classes.JDBC;
import java.awt.Desktop;
import java.io.File;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultComboBoxModel;
import org.apache.log4j.Logger;

/**
 *
 * @author Uditha N. Bandara
 */
public class EmployeeRegistration extends javax.swing.JFrame {

    /**
     * Creates new form StudentRegistration
     */
    JDBC DB = new JDBC();
    Classes.ToolsClass tools = new Classes.ToolsClass();
    int sr;
    DefaultTableModel d;
    Logger log=Logger.getLogger("Employee Registration"); 
    public EmployeeRegistration() {
        initComponents();
        Menu();
        lbl_userType.setText(Home.ut);
        lbl_username.setText(Home.un);
        this.setExtendedState(MAXIMIZED_BOTH);
        refreshFrame();
        lbl_date.setText(new Classes.Commons().Date());
        new Classes.Commons().time(lbl_time);
        txt_nic.grabFocus();
    }
    
    //////------------Menu-----------//////

    void Menu() {
        try {
            popup_menu.setText("Menu");
            popup_help.setText("Help");
            popup_exit.setText("Exit");

        } catch (Exception e) {
            e.printStackTrace();
        }

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        popup_menu = new javax.swing.JMenuItem();
        popup_help = new javax.swing.JMenuItem();
        popup_exit = new javax.swing.JMenuItem();
        pnl_employeeDetails = new javax.swing.JPanel();
        lbl_id = new javax.swing.JLabel();
        lbl_nic = new javax.swing.JLabel();
        lbl_salutation = new javax.swing.JLabel();
        lbl_firstName = new javax.swing.JLabel();
        lbl_lastName = new javax.swing.JLabel();
        lbl_address = new javax.swing.JLabel();
        lbl_no = new javax.swing.JLabel();
        lbl_street1 = new javax.swing.JLabel();
        lbl_street2 = new javax.swing.JLabel();
        lbl_city = new javax.swing.JLabel();
        lbl_gender = new javax.swing.JLabel();
        lbl_email = new javax.swing.JLabel();
        lbl_jobtitle = new javax.swing.JLabel();
        lbl_homeNumber = new javax.swing.JLabel();
        lbl_mobileNumber = new javax.swing.JLabel();
        txt_mobileNumber = new javax.swing.JTextField();
        txt_email = new javax.swing.JTextField();
        txt_city = new javax.swing.JTextField();
        txt_street2 = new javax.swing.JTextField();
        txt_street1 = new javax.swing.JTextField();
        txt_no = new javax.swing.JTextField();
        txt_lastName = new javax.swing.JTextField();
        txt_firstName = new javax.swing.JTextField();
        txt_nic = new javax.swing.JTextField();
        cmb_gender = new javax.swing.JComboBox();
        cmb_jobTitle = new javax.swing.JComboBox();
        cmb_salutation = new javax.swing.JComboBox();
        txt_homeNumber = new javax.swing.JTextField();
        lbl_qualifications1 = new javax.swing.JLabel();
        cmb_qualifications = new javax.swing.JComboBox();
        lbl_employeeId = new javax.swing.JLabel();
        pnl_header = new javax.swing.JPanel();
        btn_close = new javax.swing.JButton();
        btn_menu = new javax.swing.JButton();
        lbl_userType = new javax.swing.JLabel();
        lbl_username = new javax.swing.JLabel();
        lbl_date = new javax.swing.JLabel();
        lbl_time = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        pnl_search = new javax.swing.JPanel();
        txt_search = new javax.swing.JTextField();
        btn_search = new javax.swing.JButton();
        pnl_details = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_employeeDetails = new javax.swing.JTable();
        btn_refresh = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_save = new javax.swing.JButton();
        cmb_filter = new javax.swing.JComboBox();
        chk_filter = new javax.swing.JCheckBox();
        lbl_background = new javax.swing.JLabel();

        popup_menu.setText("jMenuItem1");
        popup_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menuActionPerformed(evt);
            }
        });
        popupMenu.add(popup_menu);

        popup_help.setText("jMenuItem2");
        popup_help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_helpActionPerformed(evt);
            }
        });
        popupMenu.add(popup_help);

        popup_exit.setText("jMenuItem3");
        popup_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_exitActionPerformed(evt);
            }
        });
        popupMenu.add(popup_exit);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnl_employeeDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 10), new java.awt.Color(0, 0, 0))); // NOI18N
        pnl_employeeDetails.setOpaque(false);
        pnl_employeeDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnl_employeeDetailsMouseClicked(evt);
            }
        });

        lbl_id.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_id.setText("Employee ID:");

        lbl_nic.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_nic.setText("NIC:");

        lbl_salutation.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_salutation.setText("Salutation:");

        lbl_firstName.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_firstName.setText("First Name:");

        lbl_lastName.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_lastName.setText("Last Name:");

        lbl_address.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_address.setText("Address:-");

        lbl_no.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_no.setText("No:");

        lbl_street1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_street1.setText("Street 01:");

        lbl_street2.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_street2.setText("Street 02:");

        lbl_city.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_city.setText("City:");

        lbl_gender.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_gender.setText("Gender:");

        lbl_email.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_email.setText("Email:");

        lbl_jobtitle.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_jobtitle.setText("Job Title :");

        lbl_homeNumber.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_homeNumber.setText("Home Number:");

        lbl_mobileNumber.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_mobileNumber.setText("Mobile Number:");

        txt_mobileNumber.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_mobileNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mobileNumberKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_mobileNumberKeyTyped(evt);
            }
        });

        txt_email.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_emailActionPerformed(evt);
            }
        });
        txt_email.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_emailFocusLost(evt);
            }
        });
        txt_email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_emailKeyReleased(evt);
            }
        });

        txt_city.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_city.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_cityKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_cityKeyTyped(evt);
            }
        });

        txt_street2.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_street2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_street2KeyReleased(evt);
            }
        });

        txt_street1.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_street1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_street1KeyReleased(evt);
            }
        });

        txt_no.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_no.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_noKeyReleased(evt);
            }
        });

        txt_lastName.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_lastName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_lastNameKeyReleased(evt);
            }
        });

        txt_firstName.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_firstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_firstNameActionPerformed(evt);
            }
        });
        txt_firstName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_firstNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_firstNameFocusLost(evt);
            }
        });
        txt_firstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_firstNameKeyReleased(evt);
            }
        });

        txt_nic.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_nic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nicActionPerformed(evt);
            }
        });
        txt_nic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_nicKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_nicKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_nicKeyTyped(evt);
            }
        });

        cmb_gender.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        cmb_gender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_genderActionPerformed(evt);
            }
        });
        cmb_gender.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmb_genderKeyReleased(evt);
            }
        });

        cmb_jobTitle.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        cmb_jobTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_jobTitleActionPerformed(evt);
            }
        });

        cmb_salutation.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        cmb_salutation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_salutationActionPerformed(evt);
            }
        });
        cmb_salutation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cmb_salutationFocusLost(evt);
            }
        });
        cmb_salutation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmb_salutationKeyReleased(evt);
            }
        });

        txt_homeNumber.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_homeNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_homeNumberKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_homeNumberKeyTyped(evt);
            }
        });

        lbl_qualifications1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_qualifications1.setText("Qualifications:");

        cmb_qualifications.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        cmb_qualifications.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_qualificationsActionPerformed(evt);
            }
        });
        cmb_qualifications.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmb_qualificationsKeyReleased(evt);
            }
        });

        lbl_employeeId.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        javax.swing.GroupLayout pnl_employeeDetailsLayout = new javax.swing.GroupLayout(pnl_employeeDetails);
        pnl_employeeDetails.setLayout(pnl_employeeDetailsLayout);
        pnl_employeeDetailsLayout.setHorizontalGroup(
            pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_employeeDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_mobileNumber)
                    .addComponent(lbl_email)
                    .addComponent(lbl_salutation)
                    .addComponent(lbl_id)
                    .addComponent(lbl_nic)
                    .addComponent(lbl_firstName)
                    .addComponent(lbl_lastName)
                    .addComponent(lbl_address)
                    .addGroup(pnl_employeeDetailsLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_street1)
                            .addComponent(lbl_no)
                            .addComponent(lbl_street2)
                            .addComponent(lbl_city)))
                    .addComponent(lbl_gender)
                    .addComponent(lbl_homeNumber)
                    .addComponent(lbl_qualifications1)
                    .addComponent(lbl_jobtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmb_jobTitle, 0, 298, Short.MAX_VALUE)
                    .addComponent(txt_firstName, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(txt_lastName, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(cmb_gender, 0, 298, Short.MAX_VALUE)
                    .addComponent(txt_no, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(txt_street1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(txt_street2, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(txt_email, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(txt_city, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(txt_mobileNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(txt_homeNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(txt_nic)
                    .addComponent(cmb_salutation, 0, 298, Short.MAX_VALUE)
                    .addComponent(cmb_qualifications, 0, 298, Short.MAX_VALUE)
                    .addComponent(lbl_employeeId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        pnl_employeeDetailsLayout.setVerticalGroup(
            pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_employeeDetailsLayout.createSequentialGroup()
                .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_employeeDetailsLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(lbl_employeeId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_employeeDetailsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbl_id)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_nic)
                    .addComponent(txt_nic, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_salutation)
                    .addComponent(cmb_salutation, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_firstName)
                    .addComponent(txt_firstName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_lastName)
                    .addComponent(txt_lastName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_gender)
                    .addComponent(cmb_gender, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_employeeDetailsLayout.createSequentialGroup()
                        .addComponent(lbl_address)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_no)
                            .addComponent(txt_no, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_street1)
                            .addComponent(txt_street1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_street2)
                            .addComponent(txt_street2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_city)
                            .addComponent(txt_city, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_homeNumber)
                            .addComponent(txt_homeNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_mobileNumber)
                            .addComponent(txt_mobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_email)
                            .addComponent(txt_email, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_employeeDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_qualifications1)
                            .addComponent(cmb_qualifications, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbl_jobtitle)
                        .addGap(0, 6, Short.MAX_VALUE))
                    .addGroup(pnl_employeeDetailsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cmb_jobTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38))
        );

        getContentPane().add(pnl_employeeDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 128, 480, 640));

        pnl_header.setBackground(new java.awt.Color(255, 255, 255));
        pnl_header.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnl_header.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnl_headerMouseClicked(evt);
            }
        });
        pnl_header.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/cancel.png"))); // NOI18N
        btn_close.setContentAreaFilled(false);
        btn_close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeActionPerformed(evt);
            }
        });
        pnl_header.add(btn_close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1340, 10, 16, 16));

        btn_menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/menu.png"))); // NOI18N
        btn_menu.setContentAreaFilled(false);
        btn_menu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_menuActionPerformed(evt);
            }
        });
        pnl_header.add(btn_menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 9, 32, 32));

        lbl_userType.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        lbl_userType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_userType.setText("User type");
        pnl_header.add(lbl_userType, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 30, 220, -1));

        lbl_username.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        lbl_username.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_username.setText("Username");
        pnl_header.add(lbl_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 10, 220, -1));

        lbl_date.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        lbl_date.setText("jLabel3");
        pnl_header.add(lbl_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 100, -1));

        lbl_time.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        lbl_time.setText("jLabel3");
        pnl_header.add(lbl_time, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 23, 100, -1));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setText("Employee Registration");
        pnl_header.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 340, 30));

        getContentPane().add(pnl_header, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, 50));

        pnl_search.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 10), new java.awt.Color(0, 0, 0))); // NOI18N
        pnl_search.setOpaque(false);
        pnl_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnl_searchMouseClicked(evt);
            }
        });

        txt_search.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchActionPerformed(evt);
            }
        });

        btn_search.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_search.setText("Search");
        btn_search.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_searchMouseClicked(evt);
            }
        });
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });
        btn_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btn_searchKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout pnl_searchLayout = new javax.swing.GroupLayout(pnl_search);
        pnl_search.setLayout(pnl_searchLayout);
        pnl_searchLayout.setHorizontalGroup(
            pnl_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_searchLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 1190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_search, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
        );
        pnl_searchLayout.setVerticalGroup(
            pnl_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_searchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        getContentPane().add(pnl_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 1366, 75));

        pnl_details.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 10), new java.awt.Color(0, 0, 0))); // NOI18N
        pnl_details.setOpaque(false);
        pnl_details.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnl_detailsMouseClicked(evt);
            }
        });

        tbl_employeeDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "NIC", "Name", "Address", "Home Number", "Mobile Number", "Email", "Job Title", "Reg. date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_employeeDetails.getTableHeader().setReorderingAllowed(false);
        tbl_employeeDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_employeeDetailsMouseClicked(evt);
            }
        });
        tbl_employeeDetails.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbl_employeeDetailsKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_employeeDetails);

        btn_refresh.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_refresh.setText("Refresh");
        btn_refresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        btn_update.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_update.setText("Update");
        btn_update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_save.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_save.setText("Save");
        btn_save.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        cmb_filter.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        cmb_filter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "- Select filter option -", "Active", "Inactive" }));
        cmb_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_filterActionPerformed(evt);
            }
        });
        cmb_filter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cmb_filterFocusLost(evt);
            }
        });
        cmb_filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmb_filterKeyReleased(evt);
            }
        });

        chk_filter.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        chk_filter.setText("Filter Employees");
        chk_filter.setOpaque(false);
        chk_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_filterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_detailsLayout = new javax.swing.GroupLayout(pnl_details);
        pnl_details.setLayout(pnl_detailsLayout);
        pnl_detailsLayout.setHorizontalGroup(
            pnl_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_detailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 854, Short.MAX_VALUE)
                    .addGroup(pnl_detailsLayout.createSequentialGroup()
                        .addComponent(chk_filter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_filter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnl_detailsLayout.setVerticalGroup(
            pnl_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_detailsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_refresh)
                    .addComponent(btn_update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_save)
                    .addComponent(cmb_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chk_filter))
                .addContainerGap())
        );

        getContentPane().add(pnl_details, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 128, 886, 640));

        lbl_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background.png"))); // NOI18N
        lbl_background.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(lbl_background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, 768));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeActionPerformed
        this.dispose();
    }//GEN-LAST:event_btn_closeActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        refreshFrame();
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        updateEmployee();
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        searchEmployee();
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        saveEmployee();
    }//GEN-LAST:event_btn_saveActionPerformed

    private void txt_emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_emailActionPerformed

    private void txt_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_searchActionPerformed

    private void cmb_jobTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_jobTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_jobTitleActionPerformed

    private void txt_cityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cityKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cityKeyTyped

    private void txt_mobileNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mobileNumberKeyTyped
        char c = evt.getKeyChar();
        int i = txt_mobileNumber.getText().length();

        if (Character.isLetter(c)) {
            evt.consume();
        }

        if (i == 11) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_mobileNumberKeyTyped

    private void txt_nicKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nicKeyTyped
        char c = evt.getKeyChar();
        int i = txt_nic.getText().length();

        if (Character.isLetter(c)) {
            evt.consume();
        }

        if (i == 14) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_nicKeyTyped

    private void cmb_salutationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_salutationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_salutationActionPerformed

    private void txt_nicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nicActionPerformed

    private void btn_searchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btn_searchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_searchKeyPressed

    private void btn_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_searchMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_searchMouseClicked

    private void tbl_employeeDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_employeeDetailsMouseClicked
        tableClick();
    }//GEN-LAST:event_tbl_employeeDetailsMouseClicked

    private void tbl_employeeDetailsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_employeeDetailsKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbl_employeeDetailsKeyPressed

    private void txt_emailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_emailKeyReleased
        tools.grabFocus(txt_email, cmb_qualifications);
    }//GEN-LAST:event_txt_emailKeyReleased

    private void btn_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_menuActionPerformed
        Menu m = new Menu();
        m.setVisible(true);
    }//GEN-LAST:event_btn_menuActionPerformed

    private void cmb_genderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_genderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_genderActionPerformed

    private void cmb_salutationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmb_salutationFocusLost
         txt_firstName.grabFocus();
        if (cmb_salutation.getSelectedItem().toString().equals("Mr")) {
            cmb_gender.setSelectedItem("Male");
            cmb_gender.setEnabled(false);
        }else if (cmb_salutation.getSelectedItem().toString().equals("Mrs") || cmb_salutation.getSelectedItem().toString().equals("Miss")) {
            cmb_gender.setSelectedItem("Female"); 
            cmb_gender.setEnabled(false);
        }
        // TODO add your handling code
    }//GEN-LAST:event_cmb_salutationFocusLost

    private void txt_firstNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_firstNameFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_firstNameFocusGained

    private void txt_firstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_firstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_firstNameActionPerformed

    private void txt_firstNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_firstNameFocusLost
// TODO add your handling code here:
    }//GEN-LAST:event_txt_firstNameFocusLost

    private void txt_nicKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nicKeyReleased
        int i = evt.getKeyCode();
        if (i == 10) {
            if (txt_nic.getText().length() == 9) {
                cmb_salutation.grabFocus();
            } else if (txt_nic.getText().length() == 14) {
                cmb_salutation.grabFocus();
            } else {
                JOptionPane.showMessageDialog(this, "Invalid NIC number.");
            }
        }
    }//GEN-LAST:event_txt_nicKeyReleased

    private void txt_cityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cityKeyReleased
        tools.grabFocus(txt_city, txt_homeNumber);
    }//GEN-LAST:event_txt_cityKeyReleased

    private void txt_mobileNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mobileNumberKeyReleased
        tools.grabFocus(txt_mobileNumber, txt_email);
    }//GEN-LAST:event_txt_mobileNumberKeyReleased

    private void txt_nicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nicKeyPressed
// TODO add your handling code here:
    }//GEN-LAST:event_txt_nicKeyPressed

    private void txt_homeNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_homeNumberKeyReleased
        tools.grabFocus(txt_homeNumber, txt_mobileNumber);
    }//GEN-LAST:event_txt_homeNumberKeyReleased

    private void txt_homeNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_homeNumberKeyTyped
        char c = evt.getKeyChar();
        int i = txt_homeNumber.getText().length();

        if (Character.isLetter(c)) {
            evt.consume();
        }

        if (i == 11) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_homeNumberKeyTyped

    private void cmb_qualificationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_qualificationsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_qualificationsActionPerformed

    private void cmb_salutationKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmb_salutationKeyReleased
        tools.grabFocus(cmb_qualifications, txt_firstName);
    }//GEN-LAST:event_cmb_salutationKeyReleased

    private void txt_firstNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_firstNameKeyReleased
        tools.grabFocus(txt_firstName, txt_lastName);
    }//GEN-LAST:event_txt_firstNameKeyReleased

    private void txt_lastNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_lastNameKeyReleased
        tools.grabFocus(txt_lastName, cmb_gender);
    }//GEN-LAST:event_txt_lastNameKeyReleased

    private void cmb_genderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmb_genderKeyReleased
        tools.grabFocus(cmb_gender, txt_no);
    }//GEN-LAST:event_cmb_genderKeyReleased

    private void txt_noKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_noKeyReleased
        tools.grabFocus(txt_no, txt_street1);
    }//GEN-LAST:event_txt_noKeyReleased

    private void txt_street1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_street1KeyReleased
        tools.grabFocus(txt_street1, txt_street2);
    }//GEN-LAST:event_txt_street1KeyReleased

    private void txt_street2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_street2KeyReleased
        tools.grabFocus(txt_street2, txt_city);
    }//GEN-LAST:event_txt_street2KeyReleased

    private void cmb_qualificationsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmb_qualificationsKeyReleased
        tools.grabFocus(cmb_qualifications, cmb_jobTitle);
    }//GEN-LAST:event_cmb_qualificationsKeyReleased

    private void cmb_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_filterActionPerformed
        filterEmployees();
    }//GEN-LAST:event_cmb_filterActionPerformed

    private void cmb_filterFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmb_filterFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_filterFocusLost

    private void cmb_filterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmb_filterKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_filterKeyReleased

    private void chk_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_filterActionPerformed
        if (chk_filter.isSelected()) {
            cmb_filter.setEnabled(true);
            filterEmployees();
        } else {
            cmb_filter.setEnabled(false);
            refreshFrame();
        }
    }//GEN-LAST:event_chk_filterActionPerformed

    private void txt_emailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_emailFocusLost
        boolean b=tools.Emailvalidate(txt_email.getText());
        if (!b) {
            JOptionPane.showMessageDialog(this, "Invalid Email!");
            txt_email.grabFocus();
        }
    }//GEN-LAST:event_txt_emailFocusLost

    private void popup_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menuActionPerformed
        this.dispose();
        new Menu().setVisible(true);        
    }//GEN-LAST:event_popup_menuActionPerformed

    private void popup_helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_helpActionPerformed
       try {
            Desktop.getDesktop().open(new File("E:\\Syndicate\\Documentation\\General – Employee Registration.pdf"));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_popup_helpActionPerformed

    private void popup_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_exitActionPerformed
       this.dispose();
    }//GEN-LAST:event_popup_exitActionPerformed

    private void pnl_employeeDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_employeeDetailsMouseClicked
       if (evt.getButton() == 3) {
            popupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_pnl_employeeDetailsMouseClicked

    private void pnl_headerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_headerMouseClicked
        if (evt.getButton() == 3) {
            popupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_pnl_headerMouseClicked

    private void pnl_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_searchMouseClicked
        if (evt.getButton() == 3) {
            popupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_pnl_searchMouseClicked

    private void pnl_detailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_detailsMouseClicked
        if (evt.getButton() == 3) {
            popupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_pnl_detailsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeRegistration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_close;
    private javax.swing.JButton btn_menu;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_search;
    private javax.swing.JButton btn_update;
    private javax.swing.JCheckBox chk_filter;
    private javax.swing.JComboBox cmb_filter;
    private javax.swing.JComboBox cmb_gender;
    private javax.swing.JComboBox cmb_jobTitle;
    private javax.swing.JComboBox cmb_qualifications;
    private javax.swing.JComboBox cmb_salutation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_address;
    private javax.swing.JLabel lbl_background;
    private javax.swing.JLabel lbl_city;
    private javax.swing.JLabel lbl_date;
    private javax.swing.JLabel lbl_email;
    private javax.swing.JLabel lbl_employeeId;
    private javax.swing.JLabel lbl_firstName;
    private javax.swing.JLabel lbl_gender;
    private javax.swing.JLabel lbl_homeNumber;
    private javax.swing.JLabel lbl_id;
    private javax.swing.JLabel lbl_jobtitle;
    private javax.swing.JLabel lbl_lastName;
    private javax.swing.JLabel lbl_mobileNumber;
    private javax.swing.JLabel lbl_nic;
    private javax.swing.JLabel lbl_no;
    private javax.swing.JLabel lbl_qualifications1;
    private javax.swing.JLabel lbl_salutation;
    private javax.swing.JLabel lbl_street1;
    private javax.swing.JLabel lbl_street2;
    private javax.swing.JLabel lbl_time;
    private javax.swing.JLabel lbl_userType;
    private javax.swing.JLabel lbl_username;
    private javax.swing.JPanel pnl_details;
    private javax.swing.JPanel pnl_employeeDetails;
    private javax.swing.JPanel pnl_header;
    private javax.swing.JPanel pnl_search;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JMenuItem popup_exit;
    private javax.swing.JMenuItem popup_help;
    private javax.swing.JMenuItem popup_menu;
    private javax.swing.JTable tbl_employeeDetails;
    private javax.swing.JTextField txt_city;
    private javax.swing.JTextField txt_email;
    private javax.swing.JTextField txt_firstName;
    private javax.swing.JTextField txt_homeNumber;
    private javax.swing.JTextField txt_lastName;
    private javax.swing.JTextField txt_mobileNumber;
    private javax.swing.JTextField txt_nic;
    private javax.swing.JTextField txt_no;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField txt_street1;
    private javax.swing.JTextField txt_street2;
    // End of variables declaration//GEN-END:variables
     
    private void saveEmployee() {
        String salutationId = "";
        String jobTitleId = "";
        String qualificationId ="";
        String genderId = "";
        String employeeId = lbl_employeeId.getText();
        String nic = txt_nic.getText();
        String fn = txt_firstName.getText();
        String ln = txt_lastName.getText();
        String no = txt_no.getText();
        String st1 = txt_street1.getText();
        String st2 = txt_street2.getText();
        String city = txt_city.getText();
        String hn = txt_homeNumber.getText();
        String mn = txt_mobileNumber.getText();
        String email = txt_email.getText();
        int status = 1;
        String date = tools.Date();
        String leaves ="";
if (txt_nic.getText().isEmpty() || txt_firstName.getText().isEmpty() || txt_lastName.getText().isEmpty() ||txt_no.getText().isEmpty() || txt_city.getText().isEmpty() || txt_homeNumber.getText().isEmpty() || txt_mobileNumber.getText().isEmpty() || txt_email.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Fields can't be empty !");
        } else {
            try {
        ResultSet rs1, rs2, rs3, rs4, rs5;
        
            rs1 = DB.getData("SELECT salutation_id FROM salutation WHERE salutation='" + cmb_salutation.getSelectedItem().toString() + "'");
            rs2 = DB.getData("SELECT job_title_id FROM job_title WHERE job_name='" + cmb_jobTitle.getSelectedItem().toString() + "'");
            rs3 = DB.getData("SELECT qualification_id FROM qualification WHERE qualification='" + cmb_qualifications.getSelectedItem().toString() + "'");
            rs4 = DB.getData("SELECT gender_id FROM gender WHERE gender='" + cmb_gender.getSelectedItem().toString() + "'");
            rs5 = DB.getData("SELECT default_leaves FROM admin_panel");

            while (rs1.next()) {
                salutationId = rs1.getString("salutation_id");
            }

            while (rs2.next()) {
                jobTitleId = rs2.getString("job_title_id");
            }

            while (rs3.next()) {
                qualificationId = rs3.getString("qualification_id");
            }

            while (rs4.next()) {
                genderId = rs4.getString("gender_id");
            }

            while (rs5.next()) {
                leaves = rs5.getString("default_leaves");
            }
            
            

            DB.putData("INSERT INTO employee_reg(emp_id,nic,f_name,"
                    + "l_name,email,mobile_no,"
                    + "home_no,no,street1,"
                    + "street2,city,date,"
                    + "status,available_leaves,qualification_id,salutation_id,"
                    + "gender_id,job_title_id)VALUES("
                    + "'" + employeeId + "','" + nic + "','" + fn + "',"
                    + "'" + ln + "','" + email + "','" + mn + "',"
                    + "'" + hn + "','" + no + "','" + st1 + "',"
                    + "'" + st2 + "','" + city + "','" + date + "',"
                    + "'" + status + "','" + leaves + "','" + qualificationId + "','" + salutationId + "',"
                    + "'" + genderId + "','" + jobTitleId + "')");

            JOptionPane.showMessageDialog(this, "Saved.....!");
            log.info("Employee ID :"+employeeId+"Employee Registered at :"+new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
            refreshFrame();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
}
}
    
   

    private void updateEmployee(){
        String salutationId ="";
        String jobTitleId = "";
        String qualificationId ="";
        String genderId ="";
        String employeeId = lbl_employeeId.getText();
        String nic = txt_nic.getText();
        String fn = txt_firstName.getText();
        String ln = txt_lastName.getText();
        String no = txt_no.getText();
        String st1 = txt_street1.getText();
        String st2 = txt_street2.getText();
        String city = txt_city.getText();
        String hn = txt_homeNumber.getText();
        String mn = txt_mobileNumber.getText();
        String email = txt_email.getText();
        int status = 1;
        String date = tools.Date();

        ResultSet rs1, rs2, rs3, rs4;
        try {
            rs1 = DB.getData("SELECT salutation_id FROM salutation WHERE salutation='" + cmb_salutation.getSelectedItem().toString() + "'");
            rs2 = DB.getData("SELECT job_title_id FROM job_title WHERE job_name='" + cmb_jobTitle.getSelectedItem().toString() + "'");
            rs3 = DB.getData("SELECT qualification_id FROM qualification WHERE qualification='" + cmb_qualifications.getSelectedItem().toString() + "'");
            rs4 = DB.getData("SELECT gender_id FROM gender WHERE gender='" + cmb_gender.getSelectedItem().toString() + "'");

            while (rs1.next()) {
                salutationId = rs1.getString("salutation_id");
            }

            while (rs2.next()) {
                jobTitleId = rs2.getString("job_title_id");
            }

            while (rs3.next()) {
                qualificationId = rs3.getString("qualification_id");
            }

            while (rs4.next()) {
                genderId = rs4.getString("gender_id");
            }

            DB.putData("UPDATE employee_reg SET "
                    + "nic='" + nic + "',"
                    + "f_name='" + fn + "',"
                    + "l_name='" + ln + "',"
                    + "email='" + email + "',"
                    + "mobile_no='" + mn + "',"
                    + "home_no='" + hn + "',"
                    + "no='" + no + "',"
                    + "street1='" + st1 + "',"
                    + "street2='" + st2 + "',"
                    + "city='" + city + "',"
                    + "qualification_id='" + qualificationId + "',"
                    + "salutation_id='" + salutationId + "',"
                    + "gender_id='" + genderId + "',"
                    + "job_title_id='" + jobTitleId + "' "
                    + "WHERE emp_id='" + lbl_employeeId.getText() + "'");

            JOptionPane.showMessageDialog(this, "Updated !");
            log.info("Employee ID :"+employeeId+"Employee Details Updated at :"+new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
            refreshFrame();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void searchEmployee() {
        try {
            DefaultTableModel d = (DefaultTableModel) tbl_employeeDetails.getModel();
            int rowcount1 = d.getRowCount();
            for (int i = 0; i < rowcount1; i++) {
                d.removeRow(0);
            }

            ResultSet rs1 = DB.getData("SELECT\n"
                    + "  *\n"
                    + "FROM\n"
                    + "  employee_reg\n"
                    + "INNER JOIN\n"
                    + "  salutation\n"
                    + "INNER JOIN\n"
                    + "  job_title\n"
                    + "ON(\n"
                    + "  employee_reg.salutation_id=salutation.salutation_id\n"
                    + "  AND\n"
                    + "  employee_reg.job_title_id=job_title.job_title_id\n"
                    + "  ) WHERE emp_id='" + txt_search.getText() + "'");

            ResultSet rs2 = DB.getData("SELECT\n"
                    + "  *\n"
                    + "FROM\n"
                    + "  employee_reg\n"
                    + "INNER JOIN\n"
                    + "  salutation\n"
                    + "INNER JOIN\n"
                    + "  job_title\n"
                    + "ON(\n"
                    + "  employee_reg.salutation_id=salutation.salutation_id\n"
                    + "  AND\n"
                    + "  employee_reg.job_title_id=job_title.job_title_id\n"
                    + "  ) WHERE nic='" + txt_search.getText() + "'");

            ResultSet rs3 = DB.getData("SELECT\n"
                    + "  *\n"
                    + "FROM\n"
                    + "  employee_reg\n"
                    + "INNER JOIN\n"
                    + "  salutation\n"
                    + "INNER JOIN\n"
                    + "  job_title\n"
                    + "ON(\n"
                    + "  employee_reg.salutation_id=salutation.salutation_id\n"
                    + "  AND\n"
                    + "  employee_reg.job_title_id=job_title.job_title_id\n"
                    + "  ) WHERE f_name='" + txt_search.getText() + "'");

            ResultSet rs4 = DB.getData("SELECT\n"
                    + "  *\n"
                    + "FROM\n"
                    + "  employee_reg\n"
                    + "INNER JOIN\n"
                    + "  salutation\n"
                    + "INNER JOIN\n"
                    + "  job_title\n"
                    + "ON(\n"
                    + "  employee_reg.salutation_id=salutation.salutation_id\n"
                    + "  AND\n"
                    + "  employee_reg.job_title_id=job_title.job_title_id\n"
                    + "  ) WHERE l_name='" + txt_search.getText() + "'");

            if (rs1.next()) {
                String id = rs1.getString("emp_id");
                String nic = rs1.getString("nic");
                String fn = rs1.getString("f_name");
                String ln = rs1.getString("l_name");
                String no = rs1.getString("no");
                String s1 = rs1.getString("street1");
                String s2 = rs1.getString("street2");
                String city = rs1.getString("city");
                String hn = rs1.getString("home_no");
                String mn = rs1.getString("mobile_no");
                String email = rs1.getString("email");
                String job = rs1.getString("job_name");
                String sal = rs1.getString("salutation");
                String date = rs1.getString("date");
                String status = null;
                int stat = Integer.parseInt(rs1.getString("status"));

                if (stat == 1) {
                    status = "Active";
                } else {
                    status = "Inactive";
                }

                Vector v = new Vector();

                v.add(id);
                v.add(nic);
                v.add(sal + ". " + fn + " " + ln);
                v.add(no + ", " + s1 + ", " + s2 + ", " + city);
                v.add(hn);
                v.add(mn);
                v.add(email);
                v.add(job);
                v.add(date);
                v.add(status);
                d.addRow(v);
            } else if (rs2.next()) {
                String id = rs2.getString("emp_id");
                String nic = rs2.getString("nic");
                String fn = rs2.getString("f_name");
                String ln = rs2.getString("l_name");
                String no = rs2.getString("no");
                String s1 = rs2.getString("street1");
                String s2 = rs2.getString("street2");
                String city = rs2.getString("city");
                String hn = rs2.getString("home_no");
                String mn = rs2.getString("mobile_no");
                String email = rs2.getString("email");
                String job = rs2.getString("job_name");
                String sal = rs2.getString("salutation");
                String date = rs2.getString("date");
                String status = null;
                int stat = Integer.parseInt(rs2.getString("status"));

                if (stat == 1) {
                    status = "Active";
                } else {
                    status = "Inactive";
                }

                Vector v = new Vector();

                v.add(id);
                v.add(nic);
                v.add(sal + ". " + fn + " " + ln);
                v.add(no + ", " + s1 + ", " + s2 + ", " + city);
                v.add(hn);
                v.add(mn);
                v.add(email);
                v.add(job);
                v.add(date);
                v.add(status);
                d.addRow(v);
            } else if (rs3.next()) {
                String id = rs3.getString("emp_id");
                String nic = rs3.getString("nic");
                String fn = rs3.getString("f_name");
                String ln = rs3.getString("l_name");
                String no = rs3.getString("no");
                String s1 = rs3.getString("street1");
                String s2 = rs3.getString("street2");
                String city = rs3.getString("city");
                String hn = rs3.getString("home_no");
                String mn = rs3.getString("mobile_no");
                String email = rs3.getString("email");
                String job = rs3.getString("job_name");
                String sal = rs3.getString("salutation");
                String date = rs3.getString("date");
                String status = null;
                int stat = Integer.parseInt(rs3.getString("status"));

                if (stat == 1) {
                    status = "Active";
                } else {
                    status = "Inactive";
                }

                Vector v = new Vector();

                v.add(id);
                v.add(nic);
                v.add(sal + ". " + fn + " " + ln);
                v.add(no + ", " + s1 + ", " + s2 + ", " + city);
                v.add(hn);
                v.add(mn);
                v.add(email);
                v.add(job);
                v.add(date);
                v.add(status);
                d.addRow(v);
            } else if (rs4.next()) {
                String id = rs4.getString("emp_id");
                String nic = rs4.getString("nic");
                String fn = rs4.getString("f_name");
                String ln = rs4.getString("l_name");
                String no = rs4.getString("no");
                String s1 = rs4.getString("street1");
                String s2 = rs4.getString("street2");
                String city = rs4.getString("city");
                String hn = rs4.getString("home_no");
                String mn = rs4.getString("mobile_no");
                String email = rs4.getString("email");
                String job = rs4.getString("job_name");
                String sal = rs4.getString("salutation");
                String date = rs4.getString("date");
                String status = null;
                int stat = Integer.parseInt(rs4.getString("status"));

                if (stat == 1) {
                    status = "Active";
                } else {
                    status = "Inactive";
                }

                Vector v = new Vector();

                v.add(id);
                v.add(nic);
                v.add(sal + ". " + fn + " " + ln);
                v.add(no + ", " + s1 + ", " + s2 + ", " + city);
                v.add(hn);
                v.add(mn);
                v.add(email);
                v.add(job);
                v.add(date);
                v.add(status);
                d.addRow(v);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void loadTable() {
        try {
            DefaultTableModel d = (DefaultTableModel) tbl_employeeDetails.getModel();
            int rowcount1 = d.getRowCount();
            for (int i = 0; i < rowcount1; i++) {
                d.removeRow(0);
            }

            ResultSet rs1 = DB.getData("SELECT\n"
                    + "  *\n"
                    + "FROM\n"
                    + "  employee_reg\n"
                    + "INNER JOIN\n"
                    + "  salutation\n"
                    + "INNER JOIN\n"
                    + "  job_title\n"
                    + "ON(\n"
                    + "  employee_reg.salutation_id=salutation.salutation_id\n"
                    + "  AND\n"
                    + "  employee_reg.job_title_id=job_title.job_title_id\n"
                    + "  ) ORDER BY employee_reg.emp_id ASC");

            while (rs1.next()) {
                String id = rs1.getString("emp_id");
                String nic = rs1.getString("nic");
                String fn = rs1.getString("f_name");
                String ln = rs1.getString("l_name");
                String no = rs1.getString("no");
                String s1 = rs1.getString("street1");
                String s2 = rs1.getString("street2");
                String city = rs1.getString("city");
                String hn = rs1.getString("home_no");
                String mn = rs1.getString("mobile_no");
                String email = rs1.getString("email");
                String job = rs1.getString("job_name");
                String sal = rs1.getString("salutation");
                String date = rs1.getString("date");
                String status = null;
                int stat = Integer.parseInt(rs1.getString("status"));

                if (stat == 1) {
                    status = "Active";
                } else {
                    status = "Inactive";
                }

                Vector v = new Vector();

                v.add(id);
                v.add(nic);
                v.add(sal + ". " + fn + " " + ln);
                v.add(no + ", " + s1 + ", " + s2 + ", " + city);
                v.add(hn);
                v.add(mn);
                v.add(email);
                v.add(job);
                v.add(date);
                v.add(status);
                d.addRow(v);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void loadQualifications() {
        try {
            ResultSet rs = DB.getData("SELECT * FROM qualification");
            Vector v = new Vector();

            while (rs.next()) {
                v.add(rs.getString("qualification"));
            }

            cmb_qualifications.setModel(new DefaultComboBoxModel(v));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void loadJobTitle() {
        try {
            ResultSet rs = DB.getData("SELECT * FROM job_title");
            Vector v = new Vector();

            while (rs.next()) {
                v.add(rs.getString("job_name"));
            }

            cmb_jobTitle.setModel(new DefaultComboBoxModel(v));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void loadSalutation() {
        try {
            ResultSet rs = DB.getData("SELECT * FROM salutation");
            Vector v = new Vector();

            while (rs.next()) {
                v.add(rs.getString("salutation"));
            }

            cmb_salutation.setModel(new DefaultComboBoxModel(v));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void loadGender() {
        try {
            ResultSet rs = DB.getData("SELECT * FROM gender");
            Vector v = new Vector();

            while (rs.next()) {
                v.add(rs.getString("gender"));
            }

            cmb_gender.setModel(new DefaultComboBoxModel(v));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void refreshFrame() {
        tools.setEmployeeId(lbl_employeeId);
        cmb_filter.setSelectedItem("- Select filter option -");
        chk_filter.setSelected(false);
        cmb_filter.setEnabled(false);
        loadQualifications();
        loadJobTitle();
        loadSalutation();
        loadGender();
        loadTable();
        tools.clearComponets(
                txt_city,
                txt_email,
                txt_firstName,
                txt_homeNumber,
                txt_lastName,
                txt_mobileNumber,
                txt_nic,
                txt_no,
                txt_search,
                txt_street1,
                txt_street2
        );
        txt_nic.grabFocus();
    }

    private void tableClick() {
        DefaultTableModel d = (DefaultTableModel) tbl_employeeDetails.getModel();

        sr = tbl_employeeDetails.getSelectedRow();

        String id = (String) d.getValueAt(sr, 0);

        try {
            ResultSet rs = DB.getData("SELECT\n"
                    + "  *\n"
                    + "FROM\n"
                    + "  employee_reg\n"
                    + "INNER JOIN\n"
                    + "  salutation\n"
                    + "INNER JOIN\n"
                    + "  job_title\n"
                    + "INNER JOIN\n"
                    + "  qualification\n"
                    + "INNER JOIN\n"
                    + "  gender\n"
                    + "ON(\n"
                    + "  employee_reg.salutation_id=salutation.salutation_id\n"
                    + "  AND\n"
                    + "  employee_reg.job_title_id=job_title.job_title_id\n"
                    + "  AND\n"
                    + "  employee_reg.qualification_id=qualification.qualification_id\n"
                    + "  AND\n"
                    + "  employee_reg.gender_id=gender.gender_id\n"
                    + "  )\n"
                    + "WHERE\n"
                    + "  emp_id='" + id + "'");

            while (rs.next()) {
                lbl_employeeId.setText(rs.getString("emp_id"));
                txt_nic.setText(rs.getString("nic"));
                cmb_salutation.setSelectedItem(rs.getString("salutation"));
                txt_firstName.setText(rs.getString("f_name"));
                txt_lastName.setText(rs.getString("l_name"));
                cmb_gender.setSelectedItem(rs.getString("gender"));
                txt_no.setText(rs.getString("no"));
                txt_street1.setText(rs.getString("street1"));
                txt_street2.setText(rs.getString("street2"));
                txt_city.setText(rs.getString("city"));
                txt_homeNumber.setText(rs.getString("home_no"));
                txt_mobileNumber.setText(rs.getString("mobile_no"));
                cmb_qualifications.setSelectedItem(rs.getString("qualification"));
                cmb_jobTitle.setSelectedItem(rs.getString("job_name"));
                txt_email.setText(rs.getString("email"));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void filterEmployees() {
        try {
            d = (DefaultTableModel) tbl_employeeDetails.getModel();
            int rowcount1 = d.getRowCount();
            for (int i = 0; i < rowcount1; i++) {
                d.removeRow(0);
            }

            ResultSet rs1 = DB.getData("SELECT\n"
                    + "  *\n"
                    + "FROM\n"
                    + "  employee_reg\n"
                    + "INNER JOIN\n"
                    + "  salutation\n"
                    + "INNER JOIN\n"
                    + "  job_title\n"
                    + "ON(\n"
                    + "  employee_reg.salutation_id=salutation.salutation_id\n"
                    + "  AND\n"
                    + "  employee_reg.job_title_id=job_title.job_title_id\n"
                    + "  ) WHERE status='1'");

            ResultSet rs2 = DB.getData("SELECT\n"
                    + "  *\n"
                    + "FROM\n"
                    + "  employee_reg\n"
                    + "INNER JOIN\n"
                    + "  salutation\n"
                    + "INNER JOIN\n"
                    + "  job_title\n"
                    + "ON(\n"
                    + "  employee_reg.salutation_id=salutation.salutation_id\n"
                    + "  AND\n"
                    + "  employee_reg.job_title_id=job_title.job_title_id\n"
                    + "  ) WHERE status='0'");

            String filter = cmb_filter.getSelectedItem().toString();

            if (filter.equals("Active")) {
                while (rs1.next()) {
                    String id = rs1.getString("emp_id");
                    String nic = rs1.getString("nic");
                    String fn = rs1.getString("f_name");
                    String ln = rs1.getString("l_name");
                    String no = rs1.getString("no");
                    String s1 = rs1.getString("street1");
                    String s2 = rs1.getString("street2");
                    String city = rs1.getString("city");
                    String hn = rs1.getString("home_no");
                    String mn = rs1.getString("mobile_no");
                    String email = rs1.getString("email");
                    String job = rs1.getString("job_name");
                    String sal = rs1.getString("salutation");
                    String date = rs1.getString("date");
                    String status = null;
                    int stat = Integer.parseInt(rs1.getString("status"));

                    if (stat == 1) {
                        status = "Active";
                    } else {
                        status = "Inactive";
                    }

                    Vector v = new Vector();

                    v.add(id);
                    v.add(nic);
                    v.add(sal + ". " + fn + " " + ln);
                    v.add(no + ", " + s1 + ", " + s2 + ", " + city);
                    v.add(hn);
                    v.add(mn);
                    v.add(email);
                    v.add(job);
                    v.add(date);
                    v.add(status);
                    d.addRow(v);
                }
            } else if (filter.equals("Inactive")) {
                while (rs2.next()) {
                    String id = rs2.getString("emp_id");
                    String nic = rs2.getString("nic");
                    String fn = rs2.getString("f_name");
                    String ln = rs2.getString("l_name");
                    String no = rs2.getString("no");
                    String s1 = rs2.getString("street1");
                    String s2 = rs2.getString("street2");
                    String city = rs2.getString("city");
                    String hn = rs2.getString("home_no");
                    String mn = rs2.getString("mobile_no");
                    String email = rs2.getString("email");
                    String job = rs2.getString("job_name");
                    String sal = rs2.getString("salutation");
                    String date = rs2.getString("date");
                    String status = null;
                    int stat = Integer.parseInt(rs2.getString("status"));

                    if (stat == 1) {
                        status = "Active";
                    } else {
                        status = "Inactive";
                    }

                    Vector v = new Vector();

                    v.add(id);
                    v.add(nic);
                    v.add(sal + ". " + fn + " " + ln);
                    v.add(no + ", " + s1 + ", " + s2 + ", " + city);
                    v.add(hn);
                    v.add(mn);
                    v.add(email);
                    v.add(job);
                    v.add(date);
                    v.add(status);
                    d.addRow(v);
                }
            } else {
                loadTable();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
