/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Classes.JDBC;
import Classes.ToolsClass;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;

/**
 *
 * @author Hasitha Udara
 */
public class ClassDetails extends javax.swing.JFrame {

    Logger log = Logger.getLogger("ClassDeatils");

    public ClassDetails() {
        initComponents();
        Menu();
        new Classes.Commons().background(this, lbl_background);
        setClassId();
        comboBoxLoading();
        loadFromTheDb();
        lbl_username.setText(Home.un);
        lbl_userType.setText(Home.ut);
        txt_time.grabFocus();
        btn_update1.setEnabled(false);
        lbl_date.setText(new Classes.Commons().Date());
        new Classes.Commons().time(lbl_time);
    }

    JDBC db = new JDBC();
    ToolsClass tcl = new ToolsClass();
    static int classId;
    int sr, i1, i2;
    static String subjectid, classtypeid, fname, lname, teacherid, usbuid, uclasstypeid, uteacherid;
    
     //////------------Menu-----------//////

    void Menu() {
        try {
            popup_menu.setText("Menu");
            popup_help.setText("Help");
            popup_exit.setText("Exit");

        } catch (Exception e) {
            e.printStackTrace();
        }

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        popup_menu = new javax.swing.JMenuItem();
        popup_help = new javax.swing.JMenuItem();
        popup_exit = new javax.swing.JMenuItem();
        pnl_background = new javax.swing.JPanel();
        pnl_header = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        lbl_userType = new javax.swing.JLabel();
        lbl_username = new javax.swing.JLabel();
        lbl_date = new javax.swing.JLabel();
        lbl_time = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pnl_search = new javax.swing.JPanel();
        btn_Search = new javax.swing.JButton();
        lbl_searchBy = new javax.swing.JLabel();
        cmb_srachBy = new javax.swing.JComboBox();
        txt_search = new javax.swing.JTextField();
        pnl_classTimetable = new javax.swing.JPanel();
        lbl_day = new javax.swing.JLabel();
        lbl_subject = new javax.swing.JLabel();
        lbl_teacherName = new javax.swing.JLabel();
        lbl_classTime = new javax.swing.JLabel();
        cmb_day = new javax.swing.JComboBox();
        lbl_class = new javax.swing.JLabel();
        btn_add = new javax.swing.JButton();
        cmb_subject = new javax.swing.JComboBox();
        cmb_classType = new javax.swing.JComboBox();
        cmb_teacher = new javax.swing.JComboBox();
        txt_duration = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txt_time = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lbl_classId = new javax.swing.JLabel();
        pnl_table = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_timeTable = new javax.swing.JTable();
        btn_update1 = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();
        lbl_background = new javax.swing.JLabel();

        popup_menu.setText("jMenuItem1");
        popup_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menuActionPerformed(evt);
            }
        });
        popupMenu.add(popup_menu);

        popup_help.setText("jMenuItem2");
        popup_help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_helpActionPerformed(evt);
            }
        });
        popupMenu.add(popup_help);

        popup_exit.setText("jMenuItem3");
        popup_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_exitActionPerformed(evt);
            }
        });
        popupMenu.add(popup_exit);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnl_background.setBackground(new java.awt.Color(255, 255, 255));
        pnl_background.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnl_backgroundMouseClicked(evt);
            }
        });
        pnl_background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnl_header.setBackground(new java.awt.Color(255, 255, 255));
        pnl_header.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnl_header.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnl_headerMouseClicked(evt);
            }
        });
        pnl_header.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/cancel.png"))); // NOI18N
        jButton5.setContentAreaFilled(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        pnl_header.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 10, 16, 16));

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/menu.png"))); // NOI18N
        jButton6.setContentAreaFilled(false);
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        pnl_header.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 9, 32, 32));

        lbl_userType.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        lbl_userType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_userType.setText("User type");
        pnl_header.add(lbl_userType, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 30, 220, -1));

        lbl_username.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        lbl_username.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_username.setText("Username");
        pnl_header.add(lbl_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 10, 220, -1));

        lbl_date.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        lbl_date.setText("jLabel3");
        pnl_header.add(lbl_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 100, -1));

        lbl_time.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        lbl_time.setText("jLabel3");
        pnl_header.add(lbl_time, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 23, 100, -1));

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel3.setText("Class Details");
        pnl_header.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 340, 30));

        pnl_background.add(pnl_header, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 50));

        pnl_search.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 10)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 10), new java.awt.Color(0, 0, 0))); // NOI18N
        pnl_search.setOpaque(false);
        pnl_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnl_searchMouseClicked(evt);
            }
        });

        btn_Search.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_Search.setText("Search");
        btn_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SearchActionPerformed(evt);
            }
        });

        lbl_searchBy.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_searchBy.setText("Search By ");

        cmb_srachBy.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        cmb_srachBy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Subject", "Class Type", "Day" }));
        cmb_srachBy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmb_srachByMouseClicked(evt);
            }
        });

        txt_search.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_searchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_searchFocusLost(evt);
            }
        });
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_searchKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnl_searchLayout = new javax.swing.GroupLayout(pnl_search);
        pnl_search.setLayout(pnl_searchLayout);
        pnl_searchLayout.setHorizontalGroup(
            pnl_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_searchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_searchBy)
                .addGap(18, 18, 18)
                .addComponent(cmb_srachBy, 0, 299, Short.MAX_VALUE)
                .addGap(27, 27, 27)
                .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btn_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        pnl_searchLayout.setVerticalGroup(
            pnl_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_searchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Search)
                    .addComponent(lbl_searchBy)
                    .addComponent(cmb_srachBy, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pnl_background.add(pnl_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 56, 990, -1));

        pnl_classTimetable.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Class Timetable", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 10), new java.awt.Color(0, 0, 0))); // NOI18N
        pnl_classTimetable.setOpaque(false);
        pnl_classTimetable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnl_classTimetableMouseClicked(evt);
            }
        });

        lbl_day.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_day.setText("Day:");

        lbl_subject.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_subject.setText("Subject:");

        lbl_teacherName.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_teacherName.setText("Teacher Name:");

        lbl_classTime.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_classTime.setText("Time:");

        cmb_day.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        cmb_day.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }));

        lbl_class.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lbl_class.setText("Class Type:");

        btn_add.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_add.setText("Add");
        btn_add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        cmb_subject.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        cmb_classType.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        cmb_teacher.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        txt_duration.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_duration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_durationKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_durationKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel1.setText("Duration :");

        txt_time.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txt_time.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_timeKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_timeKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel2.setText("Class id:");

        lbl_classId.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        javax.swing.GroupLayout pnl_classTimetableLayout = new javax.swing.GroupLayout(pnl_classTimetable);
        pnl_classTimetable.setLayout(pnl_classTimetableLayout);
        pnl_classTimetableLayout.setHorizontalGroup(
            pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_classTimetableLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_duration, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_classTimetableLayout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lbl_classId, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_classTimetableLayout.createSequentialGroup()
                            .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnl_classTimetableLayout.createSequentialGroup()
                                    .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lbl_subject)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbl_classTime)
                                        .addComponent(lbl_day))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_classTimetableLayout.createSequentialGroup()
                                    .addComponent(lbl_teacherName)
                                    .addGap(18, 18, 18))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_classTimetableLayout.createSequentialGroup()
                                    .addComponent(lbl_class)
                                    .addGap(49, 49, 49)))
                            .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cmb_subject, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmb_classType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmb_teacher, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(pnl_classTimetableLayout.createSequentialGroup()
                                    .addGap(1, 1, 1)
                                    .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cmb_day, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txt_time, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(25, 25, 25))
        );
        pnl_classTimetableLayout.setVerticalGroup(
            pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_classTimetableLayout.createSequentialGroup()
                .addGap(0, 18, Short.MAX_VALUE)
                .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmb_day, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(lbl_day, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_time, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_classTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_duration)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_subject, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(cmb_subject))
                .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnl_classTimetableLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(cmb_classType, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_classTimetableLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(lbl_class, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_teacherName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_classTimetableLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(cmb_teacher, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pnl_classTimetableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_classId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pnl_background.add(pnl_classTimetable, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 147, 410, 360));

        pnl_table.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Time Table", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 10))); // NOI18N
        pnl_table.setOpaque(false);
        pnl_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnl_tableMouseClicked(evt);
            }
        });

        tbl_timeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class ID", "Day", "Time", "Duration", "Subject", "Class", "Teacher Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_timeTable.getTableHeader().setReorderingAllowed(false);
        tbl_timeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_timeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_timeTable);
        if (tbl_timeTable.getColumnModel().getColumnCount() > 0) {
            tbl_timeTable.getColumnModel().getColumn(0).setResizable(false);
            tbl_timeTable.getColumnModel().getColumn(1).setResizable(false);
            tbl_timeTable.getColumnModel().getColumn(2).setResizable(false);
            tbl_timeTable.getColumnModel().getColumn(3).setResizable(false);
            tbl_timeTable.getColumnModel().getColumn(4).setResizable(false);
            tbl_timeTable.getColumnModel().getColumn(5).setResizable(false);
            tbl_timeTable.getColumnModel().getColumn(6).setResizable(false);
        }

        btn_update1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_update1.setText("Update");
        btn_update1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_update1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_update1ActionPerformed(evt);
            }
        });

        btn_refresh.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        btn_refresh.setText("Refresh");
        btn_refresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_tableLayout = new javax.swing.GroupLayout(pnl_table);
        pnl_table.setLayout(pnl_tableLayout);
        pnl_tableLayout.setHorizontalGroup(
            pnl_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_tableLayout.createSequentialGroup()
                .addGroup(pnl_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_tableLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_update1)
                        .addGap(18, 18, 18)
                        .addComponent(btn_refresh)))
                .addContainerGap())
        );
        pnl_tableLayout.setVerticalGroup(
            pnl_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_tableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_update1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_refresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pnl_background.add(pnl_table, new org.netbeans.lib.awtextra.AbsoluteConstraints(423, 147, 580, 360));

        lbl_background.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnl_background.add(lbl_background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1011, 510));

        getContentPane().add(pnl_background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1011, 510));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void btn_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SearchActionPerformed
        searchClassDetails();
    }//GEN-LAST:event_btn_SearchActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        saveClassDetails();
        clearComb();
        txt_time.setText("");
        txt_duration.setText("");
        setClassId();
        setDaycombo();
        comboBoxLoading();
        loadFromTheDb();
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        clearComb();
        txt_search.setText("");
        txt_duration.setText("");
        txt_time.setText("");
        setClassId();
        loadFromTheDb();
        comboBoxLoading();
        setDaycombo();
        btn_add.setEnabled(true);
        btn_update1.setEnabled(false);
        cmb_subject.setEnabled(true);
        cmb_teacher.setEnabled(true);
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_update1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_update1ActionPerformed
        try {
            updateClassDetails();
            clearComb();
            txt_search.setText("");
            txt_duration.setText("");
            txt_time.setText("");
            cmb_subject.setEnabled(true);
            cmb_teacher.setEnabled(true);
            setClassId();
            loadFromTheDb();
            comboBoxLoading();
            setDaycombo();
            btn_add.setEnabled(true);
            btn_update1.setEnabled(false);
        } catch (Exception e) {
            System.out.println("btn_Update " + e);
        }
    }//GEN-LAST:event_btn_update1ActionPerformed

    private void tbl_timeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_timeTableMouseClicked
        tblMouseClick();
        btn_add.setEnabled(false);
        btn_update1.setEnabled(true);
    }//GEN-LAST:event_tbl_timeTableMouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        new Menu().setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void txt_searchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyTyped
        txt_search.setBackground(Color.WHITE);
        if (cmb_srachBy.getSelectedItem().toString().trim().equals("Class Type") || cmb_srachBy.getSelectedItem().toString().trim().equals("Day")) {
            if (Character.isDigit(evt.getKeyChar())) {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txt_searchKeyTyped

    private void txt_timeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_timeKeyTyped
        if (Character.isDigit(evt.getKeyChar())) {
            if (!txt_time.getText().equals("")) {
                if (txt_time.getText().contains(":")) {
                    if (i1 >= 2) {
                        evt.consume();
                    } else {
                        i1++;
                    }
                } else {
                    i1 = 0;
                }
            }
        } else if (evt.getKeyChar() == ':') {
            if (txt_time.getText().contains(":")) {
                evt.consume();
            }
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_txt_timeKeyTyped

    private void txt_durationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_durationKeyTyped
        if (Character.isDigit(evt.getKeyChar())) {
            if (!txt_duration.getText().equals("")) {
                if (txt_duration.getText().contains(".")) {
                    if (i2 >= 2) {
                        evt.consume();
                    } else {
                        i2++;
                    }
                } else {
                    i2 = 0;
                }
            }
        } else if (evt.getKeyChar() == '.') {
            if (txt_duration.getText().contains(".")) {
                evt.consume();
            }
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_txt_durationKeyTyped

    private void txt_timeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_timeKeyPressed
        if (evt.getKeyCode() == 10 || evt.getKeyCode() == 40) {
            txt_duration.grabFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            if (txt_time.getText().contains(":")) {
                i1--;
            } else {
                i1 = 0;
            }
        }
    }//GEN-LAST:event_txt_timeKeyPressed

    private void txt_durationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_durationKeyPressed
        if (evt.getKeyCode() == 38) {
            txt_time.grabFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            if (txt_time.getText().contains(".")) {
                i2--;
            } else {
                i2 = 0;
            }
        }
    }//GEN-LAST:event_txt_durationKeyPressed

    private void cmb_srachByMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmb_srachByMouseClicked
        txt_search.setText("");
    }//GEN-LAST:event_cmb_srachByMouseClicked

    private void txt_searchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchFocusGained
        txt_search.setText("");
        txt_duration.setText("");
        txt_time.setText("");
        clearComb();
        setClassId();
        loadFromTheDb();
        comboBoxLoading();
        setDaycombo();
    }//GEN-LAST:event_txt_searchFocusGained

    private void txt_searchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchFocusLost
        txt_search.setBackground(Color.WHITE);
    }//GEN-LAST:event_txt_searchFocusLost

    private void popup_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menuActionPerformed
         this.dispose();
        new Menu().setVisible(true);
    }//GEN-LAST:event_popup_menuActionPerformed

    private void popup_helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_helpActionPerformed
      try {
            Desktop.getDesktop().open(new File("E:\\Syndicate\\Documentation\\General – Class Details.pdf"));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_popup_helpActionPerformed

    private void popup_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_exitActionPerformed
        this.dispose();
    }//GEN-LAST:event_popup_exitActionPerformed

    private void pnl_backgroundMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_backgroundMouseClicked
         if (evt.getButton() == 3) {
            popupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_pnl_backgroundMouseClicked

    private void pnl_headerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_headerMouseClicked
        if (evt.getButton() == 3) {
            popupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_pnl_headerMouseClicked

    private void pnl_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_searchMouseClicked
         if (evt.getButton() == 3) {
            popupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_pnl_searchMouseClicked

    private void pnl_classTimetableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_classTimetableMouseClicked
       if (evt.getButton() == 3) {
            popupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_pnl_classTimetableMouseClicked

    private void pnl_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_tableMouseClicked
         if (evt.getButton() == 3) {
            popupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_pnl_tableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClassDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClassDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClassDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClassDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Search;
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_update1;
    private javax.swing.JComboBox cmb_classType;
    private javax.swing.JComboBox cmb_day;
    private javax.swing.JComboBox cmb_srachBy;
    private javax.swing.JComboBox cmb_subject;
    private javax.swing.JComboBox cmb_teacher;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_background;
    private javax.swing.JLabel lbl_class;
    private javax.swing.JLabel lbl_classId;
    private javax.swing.JLabel lbl_classTime;
    private javax.swing.JLabel lbl_date;
    private javax.swing.JLabel lbl_day;
    private javax.swing.JLabel lbl_searchBy;
    private javax.swing.JLabel lbl_subject;
    private javax.swing.JLabel lbl_teacherName;
    private javax.swing.JLabel lbl_time;
    private javax.swing.JLabel lbl_userType;
    private javax.swing.JLabel lbl_username;
    private javax.swing.JPanel pnl_background;
    private javax.swing.JPanel pnl_classTimetable;
    private javax.swing.JPanel pnl_header;
    private javax.swing.JPanel pnl_search;
    private javax.swing.JPanel pnl_table;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JMenuItem popup_exit;
    private javax.swing.JMenuItem popup_help;
    private javax.swing.JMenuItem popup_menu;
    private javax.swing.JTable tbl_timeTable;
    private javax.swing.JTextField txt_duration;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField txt_time;
    // End of variables declaration//GEN-END:variables
//--Searching from Database--//
    private void searchClassDetails() {
        try {
            tcl.clearTable(tbl_timeTable);
            DefaultTableModel deftbl = (DefaultTableModel) tbl_timeTable.getModel();

            //--Searching a Subject--//
            if (cmb_srachBy.getSelectedItem().toString().trim().equalsIgnoreCase("Subject")) {

                if (txt_search.getText().equals("")) {
                    JOptionPane.showMessageDialog(rootPane, "Please Use A Valid Keyword For Search");
                    txt_search.grabFocus();
                    txt_search.setBackground(Color.YELLOW);
                    loadFromTheDb();
                } else {
                    ResultSet rs = db.getData("SELECT class_details.class_id,class_details.day,class_details.time,class_details.duration,subject.subject_name,class_type.class_type,teacher_reg.f_name,teacher_reg.l_name\n"
                            + "FROM class_details INNER JOIN subject INNER JOIN teacher_reg INNER JOIN class_type\n"
                            + "ON(\n"
                            + "  class_details.subject_id=subject.subject_id AND class_details.class_type_id=class_type.class_type_id AND class_details.teacher_id=teacher_reg.teacher_id)\n"
                            + "WHERE\n"
                            + "  subject.subject_name LIKE '" + txt_search.getText().trim().toString() + "%' ORDER BY class_id DESC ");

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("class_id"));
                        v.add(rs.getString("day"));
                        v.add(rs.getString("time"));
                        v.add(rs.getString("duration"));
                        v.add(rs.getString("subject_name"));
                        v.add(rs.getString("class_type"));
                        v.add(rs.getString("f_name") + " " + rs.getString("l_name"));
                        deftbl.addRow(v);
                    }
                    if (!(rs.next())) {
                        JOptionPane.showMessageDialog(rootPane, "The Data You Searched Does Not Exist.Try Again", "Data Not Found", JOptionPane.ERROR_MESSAGE);
            
                    }
                }
            //--End of Searching a Subject--//

                //--Searching a Class Type--//
            } else if (cmb_srachBy.getSelectedItem().toString().trim().equalsIgnoreCase("Class Type") && !(txt_search.getText().equalsIgnoreCase(""))) {

                if (txt_search.getText().equals("")) {
                    JOptionPane.showMessageDialog(rootPane, "Please Use A Valid Keyword For Search");
                    txt_search.grabFocus();
                    txt_search.setBackground(Color.YELLOW);
                    loadFromTheDb();
                } else {

                    ResultSet rs = db.getData("SELECT class_details.class_id,class_details.day,class_details.time,class_details.duration,subject.subject_name,class_type.class_type,teacher_reg.f_name,teacher_reg.l_name\n"
                            + "FROM class_details INNER JOIN subject INNER JOIN teacher_reg INNER JOIN class_type\n"
                            + "ON(\n"
                            + "  class_details.subject_id=subject.subject_id AND class_details.class_type_id=class_type.class_type_id AND class_details.teacher_id=teacher_reg.teacher_id)\n"
                            + "WHERE\n"
                            + "  class_type.class_type LIKE '" + txt_search.getText().trim().toString() + "%' ORDER BY class_id DESC ");

                    while (rs.next()) {

                        Vector v = new Vector();
                        v.add(rs.getString("class_id"));
                        v.add(rs.getString("day"));
                        v.add(rs.getString("time"));
                        v.add(rs.getString("duration"));
                        v.add(rs.getString("subject_name"));
                        v.add(rs.getString("class_type"));
                        v.add(rs.getString("f_name") + " " + rs.getString("l_name"));
                        deftbl.addRow(v);
                    }
                    if (!(rs.next())) {
                        JOptionPane.showMessageDialog(rootPane, "The Data You Searched Does Not Exist.Try Again", "Data Not Found", JOptionPane.ERROR_MESSAGE);
            
                    }
                }
            //--End of Searching a Class Type--//

                //--Searching a Day--//
            } else if (cmb_srachBy.getSelectedItem().toString().trim().equalsIgnoreCase("Day") && !(txt_search.getText().equalsIgnoreCase(""))) {

                if (txt_search.getText().equals("")) {
                    JOptionPane.showMessageDialog(rootPane, "Please Use A Valid Keyword For Search");
                    txt_search.grabFocus();
                    txt_search.setBackground(Color.YELLOW);
                    loadFromTheDb();
                } else {
                    System.out.println("in else");
                    ResultSet rs = db.getData("SELECT class_details.class_id,class_details.day,class_details.time,class_details.duration,subject.subject_name,class_type.class_type,teacher_reg.f_name,teacher_reg.l_name\n"
                            + "FROM class_details INNER JOIN subject INNER JOIN teacher_reg INNER JOIN class_type\n"
                            + "ON(\n"
                            + "  class_details.subject_id=subject.subject_id AND class_details.class_type_id=class_type.class_type_id AND class_details.teacher_id=teacher_reg.teacher_id)\n"
                            + "WHERE\n"
                            + "  class_details.day LIKE '" + txt_search.getText().trim().toString() + "%' ORDER BY class_id DESC ");

                    while (rs.next()) {
                        System.out.println("in while");
                        Vector v = new Vector();
                        v.add(rs.getString("class_id"));
                        v.add(rs.getString("day"));
                        v.add(rs.getString("time"));
                        v.add(rs.getString("duration"));
                        v.add(rs.getString("subject_name"));
                        v.add(rs.getString("class_type"));
                        v.add(rs.getString("f_name") + " " + rs.getString("l_name"));
                        deftbl.addRow(v);
                    }
                    if (!(rs.next())) {
                        JOptionPane.showMessageDialog(rootPane, "The Data You Searched Does Not Exist.Try Again", "Data Not Found", JOptionPane.ERROR_MESSAGE);
            
                    }
                }
                //--End of Searching a Day--//

            } else if (txt_search.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Please Use A Valid Keyword For Search");
                txt_search.grabFocus();
                txt_search.setBackground(Color.YELLOW);
                loadFromTheDb();
            }
        } catch (Exception e) {
            System.out.println("Inside searchClassDetails() " + e);
        }
    }
//--End of Searching From Database--//

    private void loadFromTheDb() {
        tcl.clearTable(tbl_timeTable);
        try {
            ResultSet rs = db.getData("SELECT class_details.class_id,class_details.day,class_details.time,class_details.duration,subject.subject_name,class_type.class_type,teacher_reg.f_name,teacher_reg.l_name\n"
                    + "FROM class_details INNER JOIN subject INNER JOIN teacher_reg INNER JOIN class_type\n"
                    + "ON (class_details.subject_id=subject.subject_id AND class_details.class_type_id=class_type.class_type_id AND class_details.teacher_id=teacher_reg.teacher_id) ORDER BY class_id DESC");
            while (rs.next()) {
                String id = rs.getString("class_id");
                String day = rs.getString("day");
                String time = rs.getString("time");
                String duration = rs.getString("duration");
                String subject = rs.getString("subject_name");
                String class_type = rs.getString("class_type");
                String teacher = rs.getString("f_name") + " " + rs.getString("l_name");

                tcl.addToTable(tbl_timeTable, id, day, time, duration, subject, class_type, teacher);
            }
        } catch (Exception e) {
            System.out.println("Inside loadFromTheDb() " + e);
            e.printStackTrace();
        }
    }

//--Save class details to Database--//
    private void saveClassDetails() {
        try {
            if (txt_time.getText().isEmpty() || txt_duration.getText().isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Fields Cannot Be Empty!");
                if (txt_time.getText().isEmpty()) {
                    txt_time.grabFocus();
                } else if (txt_duration.getText().isEmpty()) {
                    txt_duration.grabFocus();
                }
            } else {
                
                ResultSet rs = db.getData("SELECT subject_id FROM subject WHERE subject_name= '" + cmb_subject.getSelectedItem().toString() + "'");
                while (rs.next()) {
                    subjectid = rs.getString("subject_id");
                }

                ResultSet rs1 = db.getData("SELECT class_type_id FROM class_type WHERE class_type= '" + cmb_classType.getSelectedItem().toString() + "'");
                while (rs1.next()) {
                    classtypeid = rs1.getString("class_type_id");
                }

                String names[] = cmb_teacher.getSelectedItem().toString().split(" ");
                fname = names[0];
                lname = names[1];

                ResultSet rs2 = db.getData("SELECT teacher_id FROM teacher_reg WHERE f_name= '" + fname + "' AND l_name='" + lname + "'");
                while (rs2.next()) {
                    teacherid = rs2.getString("teacher_id");
                }

                db.putData("INSERT INTO class_details VALUES ('" + Integer.parseInt(lbl_classId.getText()) + "','" + cmb_day.getSelectedItem().toString() + "','" + txt_time.getText() + "', '" + Double.parseDouble(txt_duration.getText()) + "','" + subjectid + "','" + classtypeid + "','" + teacherid + "')");
                log.info("Class ID :" + lbl_classId.getText() + " class Added at :" + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));

                JOptionPane.showMessageDialog(rootPane, "The Class is Successfully Saved!");
            }
        } catch (Exception e) {
            System.out.println("Inside saveClassDetails() " + e);
            e.printStackTrace();
        }
    }
//--End of saving class details to Database--//

//--Load comboBoxes from Database--//
    private void comboBoxLoading() {
        try {
            //--Combo Subject--//
            ResultSet rs = db.getData("SELECT subject_name FROM subject");
            Vector v = new Vector();
            while (rs.next()) {
                v.add(rs.getString("subject_name"));
            }
            cmb_subject.setModel(new DefaultComboBoxModel(v));
            //--End of Combo Subject--//

            //--Combo Class_type--//
            ResultSet rs1 = db.getData("SELECT class_type FROM class_type");
            Vector v1 = new Vector();
            while (rs1.next()) {
                v1.add(rs1.getString("class_type"));
            }
            cmb_classType.setModel(new DefaultComboBoxModel(v1));
            //--End of Combo Class_type--//

            //--Combo Teacher--//
            ResultSet rs2 = db.getData("SELECT f_name,l_name FROM teacher_reg");

            Vector v2 = new Vector();
            while (rs2.next()) {
                v2.add(rs2.getString("f_name") + " " + rs2.getString("l_name"));
            }
            cmb_teacher.setModel(new DefaultComboBoxModel(v2));
            //--End of Combo Teacher--//

        } catch (Exception e) {
            System.out.println("Inside comboBoxLoading() method" + e);
        }

    }
//--End of Loading comboBoxes from Database--//

//--Update class Details on database--//
    private void updateClassDetails() {
        try {
            if (txt_time.getText().isEmpty()) {

                JOptionPane.showMessageDialog(rootPane, "Fields Cannot Be Empty");
                txt_time.grabFocus();

            } else if (txt_duration.getText().isEmpty()) {

                JOptionPane.showMessageDialog(rootPane, "Fields Cannot Be Empty");
                txt_duration.grabFocus();

            } else {

                ResultSet rs = db.getData("SELECT subject_id FROM subject WHERE subject_name= '" + cmb_subject.getSelectedItem().toString() + "'");
                while (rs.next()) {
                    usbuid = rs.getString("subject_id");
                }

                ResultSet rs1 = db.getData("SELECT class_type_id FROM class_type WHERE class_type= '" + cmb_classType.getSelectedItem().toString() + "'");
                while (rs1.next()) {
                    uclasstypeid = rs1.getString("class_type_id");
                }

                String names[] = cmb_teacher.getSelectedItem().toString().split(" ");
                fname = names[0];
                lname = names[1];

                ResultSet rs2 = db.getData("SELECT teacher_id FROM teacher_reg WHERE f_name= '" + fname + "' AND l_name='" + lname + "'");
                while (rs2.next()) {
                    uteacherid = rs2.getString("teacher_id");
                }

                db.putData("UPDATE class_details SET day = '" + cmb_day.getSelectedItem().toString() + "'"
                        + ", time = '" + txt_time.getText() + "', duration = '" + Double.parseDouble(txt_duration.getText()) + "'"
                        + ", subject_id = '" + usbuid + "', class_type_id = '" + uclasstypeid + "'"
                        + ", teacher_id = '" + uteacherid + "' WHERE class_id = '" + lbl_classId.getText() + "' ");

                log.info("Class ID :" + lbl_classId.getText() + " class details Updated at :" + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));

                JOptionPane.showMessageDialog(rootPane, "The Class is Successfully Updated!");
            }
        } catch (Exception e) {
            System.out.println("Inside updateClassDetails() " + e);
        }
    }
//--End of Updating class Details on database--//

//--Taking data from table--//
    private void tblMouseClick() {
        cmb_subject.removeAllItems();
        cmb_classType.removeAllItems();
        cmb_teacher.removeAllItems();
        cmb_day.removeAllItems();
        lbl_classId.setText("");
        try {
            DefaultTableModel deftbl = (DefaultTableModel) tbl_timeTable.getModel();
            sr = tbl_timeTable.getSelectedRow();
            setDaycombo();
            setclassType();
            lbl_classId.setText(deftbl.getValueAt(sr, 0).toString());
            cmb_day.setSelectedItem(deftbl.getValueAt(sr, 1));
            txt_time.setText(deftbl.getValueAt(sr, 2).toString());
            txt_duration.setText(deftbl.getValueAt(sr, 3).toString());
            cmb_subject.addItem(deftbl.getValueAt(sr, 4));
            cmb_classType.setSelectedItem(deftbl.getValueAt(sr, 5));
            cmb_teacher.addItem(deftbl.getValueAt(sr, 6));

            cmb_teacher.setEnabled(false);
            cmb_subject.setEnabled(false);

        } catch (Exception e) {
            System.out.println("Inside tblMouseClick() " + e);
            e.printStackTrace();
        }
    }
//--End of Taking data from table--//

//--Clear ComboBoxes--//
    private void clearComb() {
        cmb_subject.removeAllItems();
        cmb_classType.removeAllItems();
        cmb_day.removeAllItems();
        cmb_teacher.removeAllItems();
    }
//--End of Clearing ComboBoxes--//

//--Set combobox day--//
    private void setDaycombo() {
        Vector day = new Vector();
        day.add("Monday");
        day.add("Tuesday");
        day.add("Wednesday");
        day.add("Thursday");
        day.add("Friday");
        day.add("Saturday");
        day.add("Sunday");

        cmb_day.setModel(new DefaultComboBoxModel(day));
    }
//--End of Setting combobox day--//

//--Selecting a Class Type--//
    private void setclassType() {
        try {
            ResultSet rs1 = db.getData("SELECT class_type FROM class_type");
            Vector v1 = new Vector();
            while (rs1.next()) {
                v1.add(rs1.getString("class_type"));
            }
            cmb_classType.setModel(new DefaultComboBoxModel(v1));
        } catch (Exception ex) {
            System.out.println("Inside setclassType method " + ex);
        }
    }
//--End of Selecting a Class Type--//

//--Setting the class_id to the lable//
    private void setClassId() {
        lbl_classId.setText("");
        lbl_classId.setText(tcl.classId(classId) + "");
    }
//--End of Setting the class_id to the lable//
}
